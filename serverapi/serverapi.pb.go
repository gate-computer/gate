// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: serverapi/serverapi.proto

package serverapi // import "github.com/tsavola/gate/serverapi"

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import manifest "github.com/tsavola/gate/internal/manifest"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type State int32

const (
	State_NONEXISTENT State = 0
	State_RUNNING     State = 1
	State_SUSPENDED   State = 2
	State_HALTED      State = 3
	State_TERMINATED  State = 4
	State_KILLED      State = 5
)

var State_name = map[int32]string{
	0: "NONEXISTENT",
	1: "RUNNING",
	2: "SUSPENDED",
	3: "HALTED",
	4: "TERMINATED",
	5: "KILLED",
}
var State_value = map[string]int32{
	"NONEXISTENT": 0,
	"RUNNING":     1,
	"SUSPENDED":   2,
	"HALTED":      3,
	"TERMINATED":  4,
	"KILLED":      5,
}

func (x State) String() string {
	return proto.EnumName(State_name, int32(x))
}
func (State) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_serverapi_d111f65bd8efb806, []int{0}
}

type Cause int32

const (
	Cause_NORMAL                            Cause = 0
	Cause_UNREACHABLE                       Cause = 3
	Cause_CALL_STACK_EXHAUSTED              Cause = 4
	Cause_MEMORY_ACCESS_OUT_OF_BOUNDS       Cause = 5
	Cause_INDIRECT_CALL_INDEX_OUT_OF_BOUNDS Cause = 6
	Cause_INDIRECT_CALL_SIGNATURE_MISMATCH  Cause = 7
	Cause_INTEGER_DIVIDE_BY_ZERO            Cause = 8
	Cause_INTEGER_OVERFLOW                  Cause = 9
	Cause_BREAKPOINT                        Cause = 10
	Cause_ABI_DEFICIENCY                    Cause = 27
	Cause_ABI_VIOLATION                     Cause = 28
	Cause_INTERNAL                          Cause = 29
)

var Cause_name = map[int32]string{
	0:  "NORMAL",
	3:  "UNREACHABLE",
	4:  "CALL_STACK_EXHAUSTED",
	5:  "MEMORY_ACCESS_OUT_OF_BOUNDS",
	6:  "INDIRECT_CALL_INDEX_OUT_OF_BOUNDS",
	7:  "INDIRECT_CALL_SIGNATURE_MISMATCH",
	8:  "INTEGER_DIVIDE_BY_ZERO",
	9:  "INTEGER_OVERFLOW",
	10: "BREAKPOINT",
	27: "ABI_DEFICIENCY",
	28: "ABI_VIOLATION",
	29: "INTERNAL",
}
var Cause_value = map[string]int32{
	"NORMAL":                            0,
	"UNREACHABLE":                       3,
	"CALL_STACK_EXHAUSTED":              4,
	"MEMORY_ACCESS_OUT_OF_BOUNDS":       5,
	"INDIRECT_CALL_INDEX_OUT_OF_BOUNDS": 6,
	"INDIRECT_CALL_SIGNATURE_MISMATCH":  7,
	"INTEGER_DIVIDE_BY_ZERO":            8,
	"INTEGER_OVERFLOW":                  9,
	"BREAKPOINT":                        10,
	"ABI_DEFICIENCY":                    27,
	"ABI_VIOLATION":                     28,
	"INTERNAL":                          29,
}

func (x Cause) String() string {
	return proto.EnumName(Cause_name, int32(x))
}
func (Cause) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_serverapi_d111f65bd8efb806, []int{1}
}

type DebugOp int32

const (
	DebugOp_CONFIG_GET        DebugOp = 0
	DebugOp_CONFIG_SET        DebugOp = 1
	DebugOp_CONFIG_UNION      DebugOp = 2
	DebugOp_CONFIG_COMPLEMENT DebugOp = 3
	DebugOp_READ_GLOBALS      DebugOp = 4
	DebugOp_READ_MEMORY       DebugOp = 5
	DebugOp_READ_STACK        DebugOp = 6
)

var DebugOp_name = map[int32]string{
	0: "CONFIG_GET",
	1: "CONFIG_SET",
	2: "CONFIG_UNION",
	3: "CONFIG_COMPLEMENT",
	4: "READ_GLOBALS",
	5: "READ_MEMORY",
	6: "READ_STACK",
}
var DebugOp_value = map[string]int32{
	"CONFIG_GET":        0,
	"CONFIG_SET":        1,
	"CONFIG_UNION":      2,
	"CONFIG_COMPLEMENT": 3,
	"READ_GLOBALS":      4,
	"READ_MEMORY":       5,
	"READ_STACK":        6,
}

func (x DebugOp) String() string {
	return proto.EnumName(DebugOp_name, int32(x))
}
func (DebugOp) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_serverapi_d111f65bd8efb806, []int{2}
}

type ModuleRef struct {
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *ModuleRef) Reset()         { *m = ModuleRef{} }
func (m *ModuleRef) String() string { return proto.CompactTextString(m) }
func (*ModuleRef) ProtoMessage()    {}
func (*ModuleRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_serverapi_d111f65bd8efb806, []int{0}
}
func (m *ModuleRef) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ModuleRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ModuleRef.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ModuleRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ModuleRef.Merge(dst, src)
}
func (m *ModuleRef) XXX_Size() int {
	return m.Size()
}
func (m *ModuleRef) XXX_DiscardUnknown() {
	xxx_messageInfo_ModuleRef.DiscardUnknown(m)
}

var xxx_messageInfo_ModuleRef proto.InternalMessageInfo

type ModuleRefs struct {
	Modules []ModuleRef `protobuf:"bytes,1,rep,name=modules" json:"modules"`
}

func (m *ModuleRefs) Reset()         { *m = ModuleRefs{} }
func (m *ModuleRefs) String() string { return proto.CompactTextString(m) }
func (*ModuleRefs) ProtoMessage()    {}
func (*ModuleRefs) Descriptor() ([]byte, []int) {
	return fileDescriptor_serverapi_d111f65bd8efb806, []int{1}
}
func (m *ModuleRefs) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ModuleRefs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ModuleRefs.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ModuleRefs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ModuleRefs.Merge(dst, src)
}
func (m *ModuleRefs) XXX_Size() int {
	return m.Size()
}
func (m *ModuleRefs) XXX_DiscardUnknown() {
	xxx_messageInfo_ModuleRefs.DiscardUnknown(m)
}

var xxx_messageInfo_ModuleRefs proto.InternalMessageInfo

type Status struct {
	State  State  `protobuf:"varint,1,opt,name=state,proto3,enum=serverapi.State" json:"state,omitempty"`
	Cause  Cause  `protobuf:"varint,2,opt,name=cause,proto3,enum=serverapi.Cause" json:"cause,omitempty"`
	Result int32  `protobuf:"varint,3,opt,name=result,proto3" json:"result,omitempty"`
	Error  string `protobuf:"bytes,4,opt,name=error,proto3" json:"error,omitempty"`
}

func (m *Status) Reset()         { *m = Status{} }
func (m *Status) String() string { return proto.CompactTextString(m) }
func (*Status) ProtoMessage()    {}
func (*Status) Descriptor() ([]byte, []int) {
	return fileDescriptor_serverapi_d111f65bd8efb806, []int{2}
}
func (m *Status) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Status) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Status.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Status) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Status.Merge(dst, src)
}
func (m *Status) XXX_Size() int {
	return m.Size()
}
func (m *Status) XXX_DiscardUnknown() {
	xxx_messageInfo_Status.DiscardUnknown(m)
}

var xxx_messageInfo_Status proto.InternalMessageInfo

type InstanceStatus struct {
	Instance  string `protobuf:"bytes,1,opt,name=instance,proto3" json:"instance,omitempty"`
	Status    Status `protobuf:"bytes,2,opt,name=status" json:"status"`
	Transient bool   `protobuf:"varint,3,opt,name=transient,proto3" json:"transient,omitempty"`
	Debugging bool   `protobuf:"varint,4,opt,name=debugging,proto3" json:"debugging,omitempty"`
}

func (m *InstanceStatus) Reset()         { *m = InstanceStatus{} }
func (m *InstanceStatus) String() string { return proto.CompactTextString(m) }
func (*InstanceStatus) ProtoMessage()    {}
func (*InstanceStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_serverapi_d111f65bd8efb806, []int{3}
}
func (m *InstanceStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InstanceStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InstanceStatus.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *InstanceStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InstanceStatus.Merge(dst, src)
}
func (m *InstanceStatus) XXX_Size() int {
	return m.Size()
}
func (m *InstanceStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_InstanceStatus.DiscardUnknown(m)
}

var xxx_messageInfo_InstanceStatus proto.InternalMessageInfo

type Instances struct {
	Instances []InstanceStatus `protobuf:"bytes,1,rep,name=instances" json:"instances"`
}

func (m *Instances) Reset()         { *m = Instances{} }
func (m *Instances) String() string { return proto.CompactTextString(m) }
func (*Instances) ProtoMessage()    {}
func (*Instances) Descriptor() ([]byte, []int) {
	return fileDescriptor_serverapi_d111f65bd8efb806, []int{4}
}
func (m *Instances) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Instances) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Instances.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Instances) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Instances.Merge(dst, src)
}
func (m *Instances) XXX_Size() int {
	return m.Size()
}
func (m *Instances) XXX_DiscardUnknown() {
	xxx_messageInfo_Instances.DiscardUnknown(m)
}

var xxx_messageInfo_Instances proto.InternalMessageInfo

type DebugRequest struct {
	Op     DebugOp     `protobuf:"varint,1,opt,name=op,proto3,enum=serverapi.DebugOp" json:"op,omitempty"`
	Config DebugConfig `protobuf:"bytes,2,opt,name=config" json:"config"`
	Addr   uint64      `protobuf:"varint,3,opt,name=addr,proto3" json:"addr,omitempty"`
	Size_  uint64      `protobuf:"varint,4,opt,name=size,proto3" json:"size,omitempty"`
}

func (m *DebugRequest) Reset()         { *m = DebugRequest{} }
func (m *DebugRequest) String() string { return proto.CompactTextString(m) }
func (*DebugRequest) ProtoMessage()    {}
func (*DebugRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_serverapi_d111f65bd8efb806, []int{5}
}
func (m *DebugRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DebugRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DebugRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *DebugRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DebugRequest.Merge(dst, src)
}
func (m *DebugRequest) XXX_Size() int {
	return m.Size()
}
func (m *DebugRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DebugRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DebugRequest proto.InternalMessageInfo

type DebugResponse struct {
	Module string      `protobuf:"bytes,1,opt,name=module,proto3" json:"module,omitempty"`
	Status Status      `protobuf:"bytes,2,opt,name=status" json:"status"`
	Config DebugConfig `protobuf:"bytes,3,opt,name=config" json:"config"`
	Data   []byte      `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
}

func (m *DebugResponse) Reset()         { *m = DebugResponse{} }
func (m *DebugResponse) String() string { return proto.CompactTextString(m) }
func (*DebugResponse) ProtoMessage()    {}
func (*DebugResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_serverapi_d111f65bd8efb806, []int{6}
}
func (m *DebugResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DebugResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DebugResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *DebugResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DebugResponse.Merge(dst, src)
}
func (m *DebugResponse) XXX_Size() int {
	return m.Size()
}
func (m *DebugResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DebugResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DebugResponse proto.InternalMessageInfo

type DebugConfig struct {
	DebugInfo   bool                 `protobuf:"varint,1,opt,name=debug_info,json=debugInfo,proto3" json:"debug_info,omitempty"`
	Breakpoints manifest.Breakpoints `protobuf:"bytes,2,opt,name=breakpoints" json:"breakpoints"`
}

func (m *DebugConfig) Reset()         { *m = DebugConfig{} }
func (m *DebugConfig) String() string { return proto.CompactTextString(m) }
func (*DebugConfig) ProtoMessage()    {}
func (*DebugConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_serverapi_d111f65bd8efb806, []int{7}
}
func (m *DebugConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DebugConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DebugConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *DebugConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DebugConfig.Merge(dst, src)
}
func (m *DebugConfig) XXX_Size() int {
	return m.Size()
}
func (m *DebugConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_DebugConfig.DiscardUnknown(m)
}

var xxx_messageInfo_DebugConfig proto.InternalMessageInfo

func init() {
	proto.RegisterType((*ModuleRef)(nil), "serverapi.ModuleRef")
	proto.RegisterType((*ModuleRefs)(nil), "serverapi.ModuleRefs")
	proto.RegisterType((*Status)(nil), "serverapi.Status")
	proto.RegisterType((*InstanceStatus)(nil), "serverapi.InstanceStatus")
	proto.RegisterType((*Instances)(nil), "serverapi.Instances")
	proto.RegisterType((*DebugRequest)(nil), "serverapi.DebugRequest")
	proto.RegisterType((*DebugResponse)(nil), "serverapi.DebugResponse")
	proto.RegisterType((*DebugConfig)(nil), "serverapi.DebugConfig")
	proto.RegisterEnum("serverapi.State", State_name, State_value)
	proto.RegisterEnum("serverapi.Cause", Cause_name, Cause_value)
	proto.RegisterEnum("serverapi.DebugOp", DebugOp_name, DebugOp_value)
}
func (m *ModuleRef) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ModuleRef) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintServerapi(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	return i, nil
}

func (m *ModuleRefs) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ModuleRefs) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Modules) > 0 {
		for _, msg := range m.Modules {
			dAtA[i] = 0xa
			i++
			i = encodeVarintServerapi(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *Status) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Status) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.State != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintServerapi(dAtA, i, uint64(m.State))
	}
	if m.Cause != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintServerapi(dAtA, i, uint64(m.Cause))
	}
	if m.Result != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintServerapi(dAtA, i, uint64(m.Result))
	}
	if len(m.Error) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintServerapi(dAtA, i, uint64(len(m.Error)))
		i += copy(dAtA[i:], m.Error)
	}
	return i, nil
}

func (m *InstanceStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InstanceStatus) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Instance) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintServerapi(dAtA, i, uint64(len(m.Instance)))
		i += copy(dAtA[i:], m.Instance)
	}
	dAtA[i] = 0x12
	i++
	i = encodeVarintServerapi(dAtA, i, uint64(m.Status.Size()))
	n1, err := m.Status.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n1
	if m.Transient {
		dAtA[i] = 0x18
		i++
		if m.Transient {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	if m.Debugging {
		dAtA[i] = 0x20
		i++
		if m.Debugging {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *Instances) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Instances) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Instances) > 0 {
		for _, msg := range m.Instances {
			dAtA[i] = 0xa
			i++
			i = encodeVarintServerapi(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *DebugRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DebugRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Op != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintServerapi(dAtA, i, uint64(m.Op))
	}
	dAtA[i] = 0x12
	i++
	i = encodeVarintServerapi(dAtA, i, uint64(m.Config.Size()))
	n2, err := m.Config.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n2
	if m.Addr != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintServerapi(dAtA, i, uint64(m.Addr))
	}
	if m.Size_ != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintServerapi(dAtA, i, uint64(m.Size_))
	}
	return i, nil
}

func (m *DebugResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DebugResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Module) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintServerapi(dAtA, i, uint64(len(m.Module)))
		i += copy(dAtA[i:], m.Module)
	}
	dAtA[i] = 0x12
	i++
	i = encodeVarintServerapi(dAtA, i, uint64(m.Status.Size()))
	n3, err := m.Status.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n3
	dAtA[i] = 0x1a
	i++
	i = encodeVarintServerapi(dAtA, i, uint64(m.Config.Size()))
	n4, err := m.Config.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n4
	if len(m.Data) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintServerapi(dAtA, i, uint64(len(m.Data)))
		i += copy(dAtA[i:], m.Data)
	}
	return i, nil
}

func (m *DebugConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DebugConfig) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.DebugInfo {
		dAtA[i] = 0x8
		i++
		if m.DebugInfo {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	dAtA[i] = 0x12
	i++
	i = encodeVarintServerapi(dAtA, i, uint64(m.Breakpoints.Size()))
	n5, err := m.Breakpoints.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n5
	return i, nil
}

func encodeVarintServerapi(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *ModuleRef) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovServerapi(uint64(l))
	}
	return n
}

func (m *ModuleRefs) Size() (n int) {
	var l int
	_ = l
	if len(m.Modules) > 0 {
		for _, e := range m.Modules {
			l = e.Size()
			n += 1 + l + sovServerapi(uint64(l))
		}
	}
	return n
}

func (m *Status) Size() (n int) {
	var l int
	_ = l
	if m.State != 0 {
		n += 1 + sovServerapi(uint64(m.State))
	}
	if m.Cause != 0 {
		n += 1 + sovServerapi(uint64(m.Cause))
	}
	if m.Result != 0 {
		n += 1 + sovServerapi(uint64(m.Result))
	}
	l = len(m.Error)
	if l > 0 {
		n += 1 + l + sovServerapi(uint64(l))
	}
	return n
}

func (m *InstanceStatus) Size() (n int) {
	var l int
	_ = l
	l = len(m.Instance)
	if l > 0 {
		n += 1 + l + sovServerapi(uint64(l))
	}
	l = m.Status.Size()
	n += 1 + l + sovServerapi(uint64(l))
	if m.Transient {
		n += 2
	}
	if m.Debugging {
		n += 2
	}
	return n
}

func (m *Instances) Size() (n int) {
	var l int
	_ = l
	if len(m.Instances) > 0 {
		for _, e := range m.Instances {
			l = e.Size()
			n += 1 + l + sovServerapi(uint64(l))
		}
	}
	return n
}

func (m *DebugRequest) Size() (n int) {
	var l int
	_ = l
	if m.Op != 0 {
		n += 1 + sovServerapi(uint64(m.Op))
	}
	l = m.Config.Size()
	n += 1 + l + sovServerapi(uint64(l))
	if m.Addr != 0 {
		n += 1 + sovServerapi(uint64(m.Addr))
	}
	if m.Size_ != 0 {
		n += 1 + sovServerapi(uint64(m.Size_))
	}
	return n
}

func (m *DebugResponse) Size() (n int) {
	var l int
	_ = l
	l = len(m.Module)
	if l > 0 {
		n += 1 + l + sovServerapi(uint64(l))
	}
	l = m.Status.Size()
	n += 1 + l + sovServerapi(uint64(l))
	l = m.Config.Size()
	n += 1 + l + sovServerapi(uint64(l))
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovServerapi(uint64(l))
	}
	return n
}

func (m *DebugConfig) Size() (n int) {
	var l int
	_ = l
	if m.DebugInfo {
		n += 2
	}
	l = m.Breakpoints.Size()
	n += 1 + l + sovServerapi(uint64(l))
	return n
}

func sovServerapi(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozServerapi(x uint64) (n int) {
	return sovServerapi(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ModuleRef) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowServerapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ModuleRef: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ModuleRef: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServerapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthServerapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipServerapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthServerapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ModuleRefs) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowServerapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ModuleRefs: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ModuleRefs: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Modules", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServerapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthServerapi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Modules = append(m.Modules, ModuleRef{})
			if err := m.Modules[len(m.Modules)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipServerapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthServerapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Status) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowServerapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Status: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Status: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServerapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= (State(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cause", wireType)
			}
			m.Cause = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServerapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cause |= (Cause(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			m.Result = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServerapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Result |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServerapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthServerapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Error = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipServerapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthServerapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InstanceStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowServerapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InstanceStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InstanceStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Instance", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServerapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthServerapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Instance = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServerapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthServerapi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Transient", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServerapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Transient = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Debugging", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServerapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Debugging = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipServerapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthServerapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Instances) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowServerapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Instances: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Instances: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Instances", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServerapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthServerapi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Instances = append(m.Instances, InstanceStatus{})
			if err := m.Instances[len(m.Instances)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipServerapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthServerapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DebugRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowServerapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DebugRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DebugRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Op", wireType)
			}
			m.Op = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServerapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Op |= (DebugOp(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Config", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServerapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthServerapi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Config.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Addr", wireType)
			}
			m.Addr = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServerapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Addr |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Size_", wireType)
			}
			m.Size_ = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServerapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Size_ |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipServerapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthServerapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DebugResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowServerapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DebugResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DebugResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Module", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServerapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthServerapi
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Module = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServerapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthServerapi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Status.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Config", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServerapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthServerapi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Config.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServerapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthServerapi
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipServerapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthServerapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DebugConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowServerapi
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DebugConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DebugConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DebugInfo", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServerapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.DebugInfo = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Breakpoints", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowServerapi
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthServerapi
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Breakpoints.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipServerapi(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthServerapi
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipServerapi(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowServerapi
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowServerapi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowServerapi
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthServerapi
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowServerapi
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipServerapi(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthServerapi = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowServerapi   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("serverapi/serverapi.proto", fileDescriptor_serverapi_d111f65bd8efb806)
}

var fileDescriptor_serverapi_d111f65bd8efb806 = []byte{
	// 884 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x54, 0xcd, 0x6f, 0xdb, 0xc6,
	0x13, 0x15, 0xf5, 0x65, 0x6b, 0x64, 0xfb, 0xb7, 0x5e, 0x38, 0x86, 0x62, 0x27, 0x8a, 0x22, 0xfc,
	0x5a, 0x18, 0x3e, 0x58, 0x80, 0x9b, 0x6b, 0x50, 0xf0, 0x63, 0x2d, 0x6f, 0x4d, 0x2d, 0x8d, 0x25,
	0xe5, 0xda, 0x41, 0x01, 0x82, 0xb6, 0x56, 0x2a, 0x11, 0x9b, 0x54, 0x49, 0x2a, 0x87, 0xde, 0xdb,
	0x73, 0xae, 0xbd, 0xb6, 0xff, 0x8c, 0x8f, 0x39, 0xf6, 0x54, 0xb4, 0xf6, 0x3f, 0x52, 0xec, 0x92,
	0xfa, 0x88, 0x7b, 0xca, 0x6d, 0xe7, 0xcd, 0xdb, 0x99, 0xf7, 0x66, 0xb8, 0x84, 0xe7, 0xa9, 0x48,
	0x3e, 0x88, 0x24, 0x98, 0x86, 0xbd, 0xc5, 0xe9, 0x68, 0x9a, 0xc4, 0x59, 0x8c, 0x1b, 0x0b, 0x60,
	0xaf, 0x13, 0x46, 0x99, 0x48, 0xa2, 0xe0, 0xb6, 0x77, 0x17, 0x44, 0xe1, 0x58, 0xa4, 0xd9, 0xe2,
	0x90, 0x93, 0xbb, 0xfb, 0xd0, 0x18, 0xc4, 0xa3, 0xd9, 0xad, 0xe0, 0x62, 0x8c, 0xb7, 0xa0, 0x1c,
	0x8e, 0x5a, 0x5a, 0x47, 0x3b, 0x68, 0xf0, 0x72, 0x38, 0xea, 0x1a, 0x00, 0x8b, 0x64, 0x8a, 0xdf,
	0xc0, 0xda, 0x9d, 0x8a, 0xd2, 0x96, 0xd6, 0xa9, 0x1c, 0x34, 0x8f, 0x77, 0x8e, 0x96, 0xad, 0x17,
	0x3c, 0xa3, 0x7a, 0xff, 0xd7, 0xab, 0x12, 0x9f, 0x53, 0xbb, 0xbf, 0x6a, 0x50, 0x77, 0xb3, 0x20,
	0x9b, 0xa5, 0xf8, 0x6b, 0xa8, 0xa5, 0x59, 0x90, 0x09, 0xd5, 0x61, 0xeb, 0x18, 0xad, 0x5c, 0x97,
	0x0c, 0xc1, 0xf3, 0xb4, 0xe4, 0xdd, 0x04, 0xb3, 0x54, 0xb4, 0xca, 0xff, 0xe1, 0x99, 0x12, 0xe7,
	0x79, 0x1a, 0xef, 0x42, 0x3d, 0x11, 0xe9, 0xec, 0x36, 0x6b, 0x55, 0x3a, 0xda, 0x41, 0x8d, 0x17,
	0x11, 0xde, 0x81, 0x9a, 0x48, 0x92, 0x38, 0x69, 0x55, 0x95, 0x93, 0x3c, 0xe8, 0xfe, 0xa6, 0xc1,
	0x16, 0x8d, 0xd2, 0x2c, 0x88, 0x6e, 0x44, 0x21, 0x68, 0x0f, 0xd6, 0xc3, 0x02, 0x29, 0x5c, 0x2f,
	0x62, 0xdc, 0x83, 0x7a, 0xaa, 0x58, 0x4a, 0x45, 0xf3, 0x78, 0xfb, 0x89, 0xda, 0x59, 0x5a, 0x38,
	0x2d, 0x68, 0xf8, 0x05, 0x34, 0xb2, 0x24, 0x88, 0xd2, 0x50, 0x44, 0xb9, 0xa0, 0x75, 0xbe, 0x04,
	0x64, 0x76, 0x24, 0xae, 0x67, 0x93, 0x49, 0x18, 0x4d, 0x94, 0xae, 0x75, 0xbe, 0x04, 0xba, 0xdf,
	0x41, 0x63, 0x2e, 0x2d, 0xc5, 0x6f, 0xa1, 0x31, 0x57, 0x31, 0x9f, 0xf4, 0xf3, 0x95, 0xe6, 0x9f,
	0x7b, 0x28, 0x44, 0x2c, 0x6f, 0x74, 0x3f, 0x6a, 0xb0, 0x61, 0xc9, 0xca, 0x5c, 0xfc, 0x34, 0x13,
	0x69, 0x86, 0xbb, 0x50, 0x8e, 0xa7, 0xc5, 0xcc, 0xf1, 0x4a, 0x21, 0x45, 0x72, 0xa6, 0xbc, 0x1c,
	0x4f, 0xf1, 0x1b, 0xa8, 0xdf, 0xc4, 0xd1, 0x38, 0x9c, 0x14, 0x6e, 0x77, 0x9f, 0xf2, 0x4c, 0x95,
	0x9d, 0x5b, 0xce, 0xb9, 0x18, 0x43, 0x35, 0x18, 0x8d, 0x12, 0xe5, 0xb6, 0xca, 0xd5, 0x59, 0x62,
	0x69, 0xf8, 0xb3, 0x50, 0x1e, 0xab, 0x5c, 0x9d, 0xbb, 0xbf, 0x6b, 0xb0, 0x59, 0x48, 0x4a, 0xa7,
	0x71, 0x94, 0xaf, 0x2e, 0xff, 0x40, 0x8a, 0xb9, 0x17, 0xd1, 0x97, 0x4f, 0x7d, 0x29, 0xbc, 0xf2,
	0x65, 0xc2, 0x47, 0x41, 0x16, 0x28, 0x91, 0x1b, 0x5c, 0x9d, 0xbb, 0xef, 0xa1, 0xb9, 0x72, 0x01,
	0xbf, 0x04, 0x50, 0xfb, 0xf1, 0xc3, 0x68, 0x1c, 0x2b, 0x95, 0xf3, 0x8d, 0xd1, 0x68, 0x1c, 0xe3,
	0xb7, 0xd0, 0xbc, 0x4e, 0x44, 0xf0, 0x7e, 0x1a, 0x87, 0x51, 0x36, 0x57, 0xfb, 0xec, 0x68, 0xf1,
	0xba, 0x8c, 0x65, 0xb2, 0xe8, 0xbd, 0xca, 0x3f, 0xfc, 0x01, 0x6a, 0xea, 0x93, 0xc7, 0xff, 0x83,
	0x26, 0x73, 0x18, 0xb9, 0xa4, 0xae, 0x47, 0x98, 0x87, 0x4a, 0xb8, 0x09, 0x6b, 0x7c, 0xc8, 0x18,
	0x65, 0x7d, 0xa4, 0xe1, 0x4d, 0x68, 0xb8, 0x43, 0xf7, 0x9c, 0x30, 0x8b, 0x58, 0xa8, 0x8c, 0x01,
	0xea, 0xa7, 0xba, 0xed, 0x11, 0x0b, 0x55, 0xf0, 0x16, 0x80, 0x47, 0xf8, 0x80, 0x32, 0x5d, 0xc6,
	0x55, 0x99, 0x3b, 0xa3, 0xb6, 0x4d, 0x2c, 0x54, 0x3b, 0xfc, 0xa3, 0x0c, 0x35, 0xf5, 0x52, 0x24,
	0xca, 0x1c, 0x3e, 0xd0, 0x6d, 0x54, 0x92, 0xad, 0x86, 0x8c, 0x13, 0xdd, 0x3c, 0xd5, 0x0d, 0x9b,
	0xa0, 0x0a, 0x6e, 0xc1, 0x8e, 0xa9, 0xdb, 0xb6, 0xef, 0x7a, 0xba, 0x79, 0xe6, 0x93, 0xcb, 0x53,
	0x7d, 0xe8, 0xe6, 0xc5, 0x5e, 0xc1, 0xfe, 0x80, 0x0c, 0x1c, 0x7e, 0xe5, 0xeb, 0xa6, 0x49, 0x5c,
	0xd7, 0x77, 0x86, 0x9e, 0xef, 0x9c, 0xf8, 0x86, 0x33, 0x64, 0x96, 0x8b, 0x6a, 0xf8, 0x2b, 0x78,
	0x4d, 0x99, 0x45, 0x39, 0x31, 0x3d, 0x5f, 0xd5, 0xa0, 0xcc, 0x22, 0x97, 0x4f, 0x68, 0x75, 0xfc,
	0x7f, 0xe8, 0x7c, 0x4e, 0x73, 0x69, 0x9f, 0xe9, 0xde, 0x90, 0x13, 0x7f, 0x40, 0xdd, 0x81, 0xee,
	0x99, 0xa7, 0x68, 0x0d, 0xef, 0xc1, 0x2e, 0x65, 0x1e, 0xe9, 0x13, 0xee, 0x5b, 0xf4, 0x82, 0x5a,
	0xc4, 0x37, 0xae, 0xfc, 0x77, 0x84, 0x3b, 0x68, 0x1d, 0xef, 0x00, 0x9a, 0xe7, 0x9c, 0x0b, 0xc2,
	0x4f, 0x6c, 0xe7, 0x7b, 0xd4, 0x90, 0xe6, 0x0d, 0x4e, 0xf4, 0xb3, 0x73, 0x87, 0x32, 0x0f, 0x01,
	0xc6, 0xb0, 0xa5, 0x1b, 0xd4, 0xb7, 0xc8, 0x09, 0x35, 0x29, 0x61, 0xe6, 0x15, 0xda, 0xc7, 0xdb,
	0xb0, 0x29, 0xb1, 0x0b, 0xea, 0xd8, 0xba, 0x47, 0x1d, 0x86, 0x5e, 0xe0, 0x0d, 0x58, 0x97, 0xc5,
	0x38, 0xd3, 0x6d, 0xf4, 0xf2, 0xf0, 0x17, 0x0d, 0xd6, 0x8a, 0x37, 0x20, 0x0b, 0x9a, 0x0e, 0x3b,
	0xa1, 0x7d, 0xbf, 0x4f, 0xe4, 0x16, 0x96, 0xb1, 0x4b, 0x3c, 0xa4, 0x61, 0x04, 0x1b, 0x45, 0x3c,
	0x64, 0xb2, 0x56, 0x19, 0x3f, 0x83, 0xed, 0x02, 0x31, 0x9d, 0xc1, 0xb9, 0x4d, 0x06, 0x72, 0x7d,
	0x15, 0x49, 0xe4, 0x44, 0xb7, 0xfc, 0xbe, 0xed, 0x18, 0xba, 0xed, 0xa2, 0xaa, 0x1c, 0xbb, 0x42,
	0xf2, 0x81, 0xa2, 0x9a, 0xac, 0xad, 0x00, 0x35, 0x76, 0x54, 0x37, 0xbe, 0xbd, 0xff, 0xa7, 0x5d,
	0xba, 0x7f, 0x68, 0x6b, 0x9f, 0x1e, 0xda, 0xda, 0xdf, 0x0f, 0x6d, 0xed, 0xe3, 0x63, 0xbb, 0xf4,
	0xe9, 0xb1, 0x5d, 0xfa, 0xf3, 0xb1, 0x5d, 0x7a, 0xf7, 0x7a, 0x12, 0x66, 0x3f, 0xce, 0xae, 0x8f,
	0x6e, 0xe2, 0xbb, 0x5e, 0x96, 0x06, 0x1f, 0xe2, 0xdb, 0xa0, 0x37, 0x09, 0x32, 0xb1, 0xfc, 0xed,
	0x5f, 0xd7, 0xd5, 0xaf, 0xfc, 0x9b, 0x7f, 0x03, 0x00, 0x00, 0xff, 0xff, 0xad, 0xcc, 0x27, 0xf9,
	0x14, 0x06, 0x00, 0x00,
}
