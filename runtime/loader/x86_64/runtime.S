// Generated by gate.computer/ga, DO NOT EDIT!

.intel_syntax noprefix

.section .note.GNU-stack,"",%progbits
.section .text

.align	16,0xcc
.globl	runtime_init

runtime_init:
	mov	rdi, GATE_LOADER_ADDR
	mov	esi, 65536
	mov	eax, 11
	syscall
	mov	rbp, rax
	mov	edi, 34
	test	rbp, rbp
	jne	sys_exit
	mov	r9, .Lseccomp_filter_len
	lea	r8, [rip + .Lseccomp_filter]
	sub	rsp, 16
	mov	rdx, rsp
	mov	[rdx], r9
	mov	[rdx + 8], r8
	mov	edi, 1
	xor	esi, esi
	mov	eax, 317
	syscall
	mov	rbp, rax
	add	rsp, 16
	mov	edi, 35
	test	rbp, rbp
	jne	sys_exit

.align	16,0x90
.globl	runtime_init_no_sandbox
.type	runtime_init_no_sandbox,@function

runtime_init_no_sandbox:
	mov	edi, 102
	test	ebx, 1
	jne	sys_exit
	mov	rbp, rbx
	mov	r9, 13835058055282163710
	and	rbp, r9
	mov	r9, GATE_STACK_LIMIT_OFFSET
	sub	rbp, r9
	mov	r12d, -1
	mov	[rbp], r12d
	xor	eax, eax
	xor	ecx, ecx
	xor	ebp, ebp
	xor	esi, esi
	xor	edi, edi
	xor	r8d, r8d
	xor	r10d, r10d
	xor	r11d, r11d
	xor	r12d, r12d
	xor	r13d, r13d
	mov	r9, r15
	and	r15, -256
	jmp	trampoline

.align	16,0xcc
.globl	signal_handler

signal_handler:
	cmp	rdi, 11
	je	.Lsignal_segv
	mov	rbp, rbx
	mov	r9, 13835058055282163710
	and	rbp, r9
	mov	r9, GATE_STACK_LIMIT_OFFSET
	sub	rbp, r9
	mov	r12, 4611686018427387905
	mov	r13d, [rbp + 20]
	test	r13d, 2
	jne	.Ldo_not_modify_suspend_reg
	mov	r9, [rdx + 128]
	or	r9, r12
	mov	[rdx + 128], r9

.Ldo_not_modify_suspend_reg:
	or	r13, 1
	mov	[rbp + 20], r13d
	jmp	.Lsignal_return

.Lsignal_segv:
	mov	r12, [rdx + 168]
	mov	r9, [rdx + 160]
	sub	r9, 8
	mov	[rdx + 160], r9
	mov	[r9], r12
	lea	r9, [rip + .Lsignal_segv_exit]
	mov	[rdx + 168], r9
	jmp	.Lsignal_return

.Lsignal_segv_exit:
	mov	edi, 105
	jmp	.Lexit

.Lsignal_return:
	xor	eax, eax
	xor	ecx, ecx
	xor	edx, edx
	xor	ebx, ebx
	xor	ebp, ebp
	xor	esi, esi
	xor	edi, edi
	xor	r8d, r8d
	xor	r9d, r9d
	xor	r10d, r10d
	xor	r11d, r11d
	xor	r12d, r12d
	xor	r13d, r13d
	xor	r14d, r14d
	xor	r15d, r15d
	ret
	int3

.align	16,0xcc
.globl	signal_restorer

signal_restorer:
	mov	eax, 15
	syscall
	int3

.align	16,0xcc
.globl	trap_handler
.type	trap_handler,@function

trap_handler:
	mov	rdi, rdx
	test	rdi, rdi
	je	.Ltrap_exit
	cmp	rdi, 4
	je	.Ltrap_call_stack_exhausted
	add	rdi, 100
	jmp	.Lexit

.Ltrap_exit:
	mov	rbp, rbx
	mov	r9, 13835058055282163710
	and	rbp, r9
	mov	r9, GATE_STACK_LIMIT_OFFSET
	sub	rbp, r9
	mov	[rbp + 32], rax
	movq	r9, xmm0
	mov	[rbp + 40], r9
	test	rdi, rdi
	jne	.Lexit_failure
	jmp	.Lexit

.Ltrap_call_stack_exhausted:
	test	ebx, 1
	jne	.Ltrap_suspended
	mov	edi, 104
	jmp	.Lexit

.Ltrap_suspended:
	mov	edi, 102
	jmp	.Lexit

.align	16,0xcc
.globl	current_memory
.type	current_memory,@function

current_memory:
	mov	rbp, rbx
	mov	r9, 13835058055282163710
	and	rbp, r9
	mov	r9, GATE_STACK_LIMIT_OFFSET
	sub	rbp, r9
	mov	eax, [rbp + 4]
	jmp	.Lresume

.align	16,0xcc
.globl	grow_memory
.type	grow_memory,@function

grow_memory:
	mov	rbp, rbx
	mov	r9, 13835058055282163710
	and	rbp, r9
	mov	r9, GATE_STACK_LIMIT_OFFSET
	sub	rbp, r9
	mov	r12d, [rbp + 4]
	test	rax, rax
	je	.Lgrow_memory_done
	lea	r13, [r12 + rax]
	mov	r9, [r15 - 40]
	cmp	r13, r9
	jg	.Lout_of_memory
	mov	rdi, [r15 - 32]
	mov	r14, r12
	shl	r14, 16
	add	rdi, r14
	mov	rsi, rax
	shl	rsi, 16
	mov	edx, 3
	mov	eax, 10
	syscall
	test	rax, rax
	jne	.Lgrow_memory_error
	mov	[rbp + 4], r13d

.Lgrow_memory_done:
	mov	rax, r12
	jmp	.Lresume

.Lgrow_memory_error:
	mov	edi, 7
	jmp	.Lexit

.Lout_of_memory:
	mov	eax, -1
	jmp	.Lresume

.align	16,0xcc
.globl	rt_nop
.type	rt_nop,@function

rt_nop:

.Lresume_zero:
	xor	eax, eax

.Lresume:
	xor	ecx, ecx
	xor	ebp, ebp
	xor	esi, esi
	xor	edi, edi
	xor	r8d, r8d
	xor	r10d, r10d
	xor	r11d, r11d
	xor	r12d, r12d
	xor	r13d, r13d
	lea	r9, [r15 + 32]
	jmp	trampoline

.align	16,0xcc
.globl	trampoline

trampoline:
	call	.Ltrampoline_setup
.Ltrampoline_capture:
	pause
	jmp	.Ltrampoline_capture

.align	16,0xcc

.Ltrampoline_setup:
	mov	[rsp], r9
	xor	r9d, r9d
	ret
	int3

.align	16,0xcc
.globl	rt_poll
.type	rt_poll,@function

rt_poll:
	lea	rdx, [rsp + 8]
	mov	r9, [rdx]
	cmp	r9, 0
	jge	.Lpoll_with_timeout
	xor	edx, edx
	jmp	.Lpoll

.Lpoll_with_timeout:
	mov	r9, [rdx + 8]
	mov	r8, [r15 - 72]
	and	r9, r8
	mov	[rdx + 8], r9

.Lpoll:
	mov	ebp, [rsp + 32]
	mov	r12d, [rsp + 24]
	xor	r9d, r9d
	mov	r8d, 1
	sub	rsp, 16
	mov	r13, rsp
	mov	[r13], r9d
	mov	[r13 + 4], ebp
	mov	[r13 + 8], r8d
	mov	[r13 + 12], r12d
	mov	rdi, r13
	mov	esi, 2
	xor	r10d, r10d
	mov	eax, 271
	syscall
	mov	ebp, [r13 + 4]
	mov	r12d, [r13 + 12]
	add	rsp, 16
	cmp	rax, 0
	jge	.Lpoll_revents
	cmp	rax, -11
	je	.Lresume_zero
	cmp	rax, -4
	je	.Lresume_zero
	mov	edi, 10
	jmp	.Lexit

.Lpoll_revents:
	shr	rbp, 16
	shr	r12, 16
	and	ebp, 65535
	and	r12d, 65535
	mov	r9d, 8208
	and	r9, rbp
	test	r9, r9
	jne	.Lresume_zero
	mov	r9, rbp
	and	r9, -2
	test	r9, r9
	jne	.Lexit
	mov	r9, r12
	and	r9, -5
	test	r9, r9
	jne	.Lexit
	mov	rax, rbp
	or	rax, r12
	jmp	.Lresume

.align	16,0xcc
.globl	rt_read
.type	rt_read,@function

rt_read:
	mov	edx, [rsp + 8]
	test	rdx, rdx
	je	.Lresume_zero
	mov	r12, [r15 - 32]
	mov	esi, [rsp + 16]
	add	rsi, r12
	lea	rdi, [rsi + rdx]
	mov	r8, rbx
	mov	r9, 13835058055282163710
	and	r8, r9
	mov	r9, GATE_STACK_LIMIT_OFFSET
	sub	r8, r9
	mov	ebp, [r8 + 4]
	shl	rbp, 16
	add	rbp, r12
	cmp	rdi, rbp
	jg	.Lout_of_bounds
	cmp	rdi, rsi
	jl	.Lout_of_bounds
	xor	edi, edi
	xor	eax, eax
	syscall
	cmp	rax, 0
	jge	.Lresume
	cmp	rax, -11
	je	.Lresume_zero
	cmp	rax, -11
	je	.Lresume_zero
	mov	edi, 4
	jmp	.Lexit

.align	16,0xcc
.globl	rt_write
.type	rt_write,@function

rt_write:
	mov	edx, [rsp + 8]
	test	rdx, rdx
	je	.Lresume_zero
	mov	r12, [r15 - 32]
	mov	esi, [rsp + 16]
	add	rsi, r12
	lea	rdi, [rsi + rdx]
	mov	r8, rbx
	mov	r9, 13835058055282163710
	and	r8, r9
	mov	r9, GATE_STACK_LIMIT_OFFSET
	sub	r8, r9
	mov	ebp, [r8 + 4]
	shl	rbp, 16
	add	rbp, r12
	cmp	rdi, rbp
	jg	.Lout_of_bounds
	cmp	rdi, rsi
	jl	.Lout_of_bounds
	mov	edi, 1
	mov	eax, 1
	syscall
	cmp	rax, 0
	jg	.Lresume
	cmp	rax, -11
	je	.Lresume_zero
	cmp	rax, -11
	je	.Lresume_zero
	mov	edi, 5
	jmp	.Lexit

.Lout_of_bounds:
	mov	edi, 105
	jmp	.Lexit

.align	16,0xcc
.globl	rt_time
.type	rt_time,@function

rt_time:
	mov	edi, [rsp + 8]
	mov	rbp, rdi
	sub	rsp, 16
	mov	rsi, rsp
	mov	r14, rbx
	mov	r9, 13835058055282163710
	and	r14, r9
	mov	r9, GATE_STACK_LIMIT_OFFSET
	sub	r14, r9
	or	dword ptr [r14 + 20], 2
	push	rbx
	push	r15
	mov	r9, [r15 - 88]
	call	trampoline
	pop	r15
	pop	rbx
	xor	r8d, r8d
	xchg	[r14 + 20], r8d
	test	r8d, 1
	je	.Lrt_time_not_suspended
	mov	r9, 4611686018427387905
	or	rbx, r9

.Lrt_time_not_suspended:
	pop	r12
	pop	r13
	mov	edi, 9
	mov	esi, -1
	test	rax, rax
	jne	.Lexit_time
	mov	r9, [r15 - 72]
	and	r13, r9
	imul	rax, r12, 500000000
	shl	rax, 1
	add	rax, r13
	cmp	rbp, 6
	jne	.Lrt_time_got_time
	mov	r9, [r15 - 80]
	sub	rax, r9
	mov	r9, [r14 + 8]
	add	rax, r9

.Lrt_time_got_time:
	jmp	.Lresume

.align	16,0xcc
.globl	rt_timemask
.type	rt_timemask,@function

rt_timemask:
	mov	rax, [r15 - 72]
	jmp	.Lresume

.align	16,0xcc
.globl	rt_random
.type	rt_random,@function

rt_random:
	mov	rbp, rbx
	mov	r9, 13835058055282163710
	and	rbp, r9
	mov	r9, GATE_STACK_LIMIT_OFFSET
	sub	rbp, r9
	mov	r12d, [rbp + 16]
	test	r12, r12
	je	.Lno_random
	sub	r12, 1
	mov	[rbp + 16], r12d
	add	r12, r15
	mov	al, [r12 - 64]
	jmp	.Lresume

.Lno_random:
	mov	eax, -1
	jmp	.Lresume

.align	16,0xcc
.globl	rt_trap
.type	rt_trap,@function

rt_trap:
	mov	edi, [rsp + 8]
	mov	rsp, rbp

.Lexit:
	push	rdi
	mov	edi, 6
	mov	rbp, rdi
	sub	rsp, 16
	mov	rsi, rsp
	mov	r14, rbx
	mov	r9, 13835058055282163710
	and	r14, r9
	mov	r9, GATE_STACK_LIMIT_OFFSET
	sub	r14, r9
	or	dword ptr [r14 + 20], 2
	push	rbx
	push	r15
	mov	r9, [r15 - 88]
	call	trampoline
	pop	r15
	pop	rbx
	xor	r8d, r8d
	xchg	[r14 + 20], r8d
	test	r8d, 1
	je	.Lrt_trap_not_suspended
	mov	r9, 4611686018427387905
	or	rbx, r9

.Lrt_trap_not_suspended:
	pop	r12
	pop	r13
	mov	edi, 9
	mov	esi, -1
	test	rax, rax
	jne	.Lexit_time
	mov	r9, [r15 - 72]
	and	r13, r9
	imul	rax, r12, 500000000
	shl	rax, 1
	add	rax, r13
	cmp	rbp, 6
	jne	.Lrt_trap_got_time
	mov	r9, [r15 - 80]
	sub	rax, r9
	mov	r9, [r14 + 8]
	add	rax, r9

.Lrt_trap_got_time:
	pop	rdi
	mov	rsi, rax

.Lexit_time:
	mov	rbp, rbx
	mov	r9, 13835058055282163710
	and	rbp, r9
	mov	r9, GATE_STACK_LIMIT_OFFSET
	sub	rbp, r9
	mov	r12, rsp
	sub	r12, rbp
	mov	[rbp], r12d
	mov	[rbp + 8], rsi

.align	16,0x90
.globl	sys_exit
.type	sys_exit,@function

sys_exit:
	mov	eax, 231
	syscall
	int3

.Lexit_failure:
	mov	edi, 1
	jmp	.Lexit

.align	16,0xcc
.globl	rt_debug
.type	rt_debug,@function

rt_debug:
	mov	r13d, [rsp + 8]
	test	r13, r13
	je	.Lresume_zero
	mov	rsi, [r15 - 32]
	mov	r12d, [rsp + 16]
	add	r12, rsi
	lea	rbp, [r12 + r13]
	mov	r8, rbx
	mov	r9, 13835058055282163710
	and	r8, r9
	mov	r9, GATE_STACK_LIMIT_OFFSET
	sub	r8, r9
	mov	edi, [r8 + 4]
	shl	rdi, 16
	add	rdi, rsi
	cmp	rbp, rdi
	jg	.Lout_of_bounds
	cmp	rbp, r12
	jl	.Lout_of_bounds

.Ldebug_loop:
	mov	edi, 2
	mov	rsi, r12
	mov	rdx, r13
	mov	eax, 1
	syscall
	cmp	rax, 0
	jg	.Ldebugged_some
	test	rax, rax
	je	.Lresume
	cmp	rax, -4
	je	.Ldebug_loop
	mov	edi, 6
	jmp	.Lexit

.Ldebugged_some:
	sub	r13, rax
	test	r13, r13
	je	.Lresume_zero
	add	r12, rax
	jmp	.Ldebug_loop

.align	16,0xcc
.globl	rt_read8
.type	rt_read8,@function

rt_read8:
	sub	rsp, 8

.Lread8_retry:
	xor	edi, edi
	mov	rsi, rsp
	mov	edx, 8
	xor	eax, eax
	syscall
	mov	r12, rax
	pop	rbp
	cmp	r12, -11
	je	.Lread8_retry
	mov	edi, 4
	cmp	r12, 8
	jne	.Lexit
	mov	rax, rbp
	jmp	.Lresume

.align	16,0xcc
.globl	rt_write8
.type	rt_write8,@function

rt_write8:
	mov	edi, 1
	lea	rsi, [rsp + 8]
	mov	edx, 8
	mov	eax, 1
	syscall
	cmp	rax, 8
	je	.Lresume_zero
	mov	edi, 5
	jmp	.Lexit
