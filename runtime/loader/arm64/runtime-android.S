// Generated by gate.computer/ga, DO NOT EDIT!

.section .note.GNU-stack,"",%progbits
.section .text

.globl	runtime_init

runtime_init:
	mov	x0, GATE_LOADER_ADDR
	movz	x1, 1, lsl #16
	mov	w8, 215
	svc	0
	mov	x11, x0
	movz	x0, 35, lsl #0
	cmp	x11, 0
	b.ne	sys_exit
	mov	x9, .Lseccomp_filter_len
	adr	x8, .Lseccomp_filter
	sub	x29, x29, 16
	mov	x2, x29
	str	x9, [x2, 0]
	str	x8, [x2, 8]
	movz	x0, 1, lsl #0
	mov	x1, 0
	mov	w8, 277
	svc	0
	mov	x11, x0
	add	x29, x29, 16
	movz	x0, 37, lsl #0
	cmp	x11, 0
	b.ne	sys_exit

.globl	runtime_init_no_sandbox
.type	runtime_init_no_sandbox,@function

runtime_init_no_sandbox:
	movz	x0, 102, lsl #0
	tbnz	x28, 0, sys_exit
	mov	x11, x28
	movn	x9, 1, lsl #0
	movk	x9, 49151, lsl #48
	and	x11, x11, x9
	lsl	x11, x11, 4
	mov	x9, GATE_STACK_LIMIT_OFFSET
	sub	x11, x11, x9
	mov	x12, -1
	str	w12, [x11, 0]
	mov	x0, 0
	mov	x1, 0
	mov	x2, 0
	mov	x3, 0
	mov	x4, 0
	mov	x5, 0
	mov	x6, 0
	mov	x7, 0
	mov	x8, 0
	mov	x10, 0
	mov	x11, 0
	mov	x12, 0
	mov	x13, 0
	mov	x14, 0
	mov	x15, 0
	mov	x16, 0
	mov	x17, 0
	mov	x18, 0
	mov	x19, 0
	mov	x20, 0
	mov	x21, 0
	mov	x22, 0
	mov	x23, 0
	mov	x24, 0
	mov	x25, 0
	mov	x9, x27
	and	x27, x27, -256
	b	trampoline

.globl	signal_handler

signal_handler:
	cmp	x0, 11
	b.eq	.Lsignal_segv
	mov	x11, x28
	movn	x9, 1, lsl #0
	movk	x9, 49151, lsl #48
	and	x11, x11, x9
	lsl	x11, x11, 4
	mov	x9, GATE_STACK_LIMIT_OFFSET
	sub	x11, x11, x9
	movz	x12, 1, lsl #0
	movk	x12, 16384, lsl #48
	ldr	w13, [x11, 20]
	tbnz	x13, 1, .Ldo_not_modify_suspend_reg
	ldr	x9, [x2, 408]
	orr	x9, x9, x12
	str	x9, [x2, 408]

.Ldo_not_modify_suspend_reg:
	orr	x13, x13, 1
	str	w13, [x11, 20]
	b	.Lsignal_return

.Lsignal_segv:
	ldr	x12, [x2, 440]
	str	x12, [x2, 424]
	adr	x9, .Lsignal_segv_exit
	str	x9, [x2, 440]
	b	.Lsignal_return

.Lsignal_segv_exit:
	movz	x0, 105, lsl #0
	b	.Lexit

.Lsignal_return:
	mov	x0, 0
	mov	x1, 0
	mov	x2, 0
	mov	x3, 0
	mov	x4, 0
	mov	x5, 0
	mov	x6, 0
	mov	x7, 0
	mov	x8, 0
	mov	x9, 0
	mov	x10, 0
	mov	x11, 0
	mov	x12, 0
	mov	x13, 0
	mov	x14, 0
	mov	x15, 0
	mov	x16, 0
	mov	x17, 0
	mov	x18, 0
	mov	x19, 0
	mov	x20, 0
	mov	x21, 0
	mov	x22, 0
	mov	x23, 0
	mov	x24, 0
	mov	x25, 0
	mov	x26, 0
	mov	x27, 0
	mov	x28, 0
	mov	x29, 0
	ret
	dsb	sy
	isb

.globl	signal_restorer

signal_restorer:
	mov	w8, 139
	svc	0
	brk	0

.globl	trap_handler
.type	trap_handler,@function

trap_handler:
	str	lr, [x29, -8]!
	cmp	x2, 0
	b.eq	.Ltrap_exit
	cmp	x2, 4
	b.eq	.Ltrap_call_stack_exhausted
	add	x0, x2, 100
	b	.Lexit

.Ltrap_exit:
	mov	x11, x28
	movn	x9, 1, lsl #0
	movk	x9, 49151, lsl #48
	and	x11, x11, x9
	lsl	x11, x11, 4
	mov	x9, GATE_STACK_LIMIT_OFFSET
	sub	x11, x11, x9
	str	x0, [x11, 32]
	fmov	x9, d0
	str	x9, [x11, 40]
	movz	x0, 1, lsl #0
	cmp	x2, 0
	b.ne	.Lexit
	mov	x0, 0
	b	.Lexit

.Ltrap_call_stack_exhausted:
	tbnz	x28, 0, .Ltrap_suspended
	movz	x0, 104, lsl #0
	b	.Lexit

.Ltrap_suspended:
	movz	x0, 102, lsl #0
	b	.Lexit

.globl	current_memory
.type	current_memory,@function

current_memory:
	str	lr, [x29, -8]!
	mov	x11, x28
	movn	x9, 1, lsl #0
	movk	x9, 49151, lsl #48
	and	x11, x11, x9
	lsl	x11, x11, 4
	mov	x9, GATE_STACK_LIMIT_OFFSET
	sub	x11, x11, x9
	ldr	w0, [x11, 4]
	b	.Lresume

.globl	grow_memory
.type	grow_memory,@function

grow_memory:
	str	lr, [x29, -8]!
	mov	x11, x28
	movn	x9, 1, lsl #0
	movk	x9, 49151, lsl #48
	and	x11, x11, x9
	lsl	x11, x11, 4
	mov	x9, GATE_STACK_LIMIT_OFFSET
	sub	x11, x11, x9
	ldr	w12, [x11, 4]
	cmp	x0, 0
	b.eq	.Lgrow_memory_done
	add	x13, x12, x0
	ldr	x9, [x27, -40]
	cmp	x13, x9
	b.gt	.Lout_of_memory
	ldr	x0, [x27, -32]
	mov	x1, x12
	lsl	x1, x1, 16
	mov	x2, x13
	lsl	x2, x2, 16
	mov	x3, 0
	mov	w8, 216
	svc	0
	ldr	x9, [x27, -32]
	cmp	x0, x9
	b.ne	.Lgrow_memory_error
	str	w13, [x11, 4]

.Lgrow_memory_done:
	mov	x0, x12
	b	.Lresume

.Lgrow_memory_error:
	movz	x0, 11, lsl #0
	b	.Lexit

.Lout_of_memory:
	mov	x0, -1
	b	.Lresume

.globl	rt_nop
.type	rt_nop,@function

rt_nop:
	str	lr, [x29, -8]!

.Lresume_zero:
	mov	x0, 0

.Lresume:
	mov	x1, 0
	mov	x2, 0
	mov	x3, 0
	mov	x4, 0
	mov	x5, 0
	mov	x6, 0
	mov	x7, 0
	mov	x8, 0
	mov	x10, 0
	mov	x11, 0
	mov	x12, 0
	mov	x13, 0
	mov	x14, 0
	mov	x15, 0
	mov	x16, 0
	mov	x17, 0
	mov	x18, 0
	mov	x19, 0
	mov	x20, 0
	mov	x21, 0
	mov	x22, 0
	mov	x23, 0
	mov	x24, 0
	mov	x25, 0
	add	x9, x27, 32
	ldr	lr, [x29], 8
	b	trampoline

.globl	trampoline

trampoline:
	br	x9
	dsb	sy
	isb

.globl	rt_poll
.type	rt_poll,@function

rt_poll:
	str	lr, [x29, -8]!
	add	x2, x29, 8
	ldr	x9, [x2, 0]
	cmp	x9, 0
	b.ge	.Lpoll_with_timeout
	mov	x2, 0
	b	.Lpoll

.Lpoll_with_timeout:
	ldr	x9, [x2, 8]
	ldr	x8, [x27, -72]
	and	x9, x9, x8
	str	x9, [x2, 8]

.Lpoll:
	ldr	w11, [x29, 32]
	ldr	w12, [x29, 24]
	mov	x9, 0
	movz	x8, 1, lsl #0
	sub	x29, x29, 16
	mov	x13, x29
	str	w9, [x13, 0]
	str	w11, [x13, 4]
	str	w8, [x13, 8]
	str	w12, [x13, 12]
	mov	x0, x13
	movz	x1, 2, lsl #0
	mov	x3, 0
	mov	w8, 73
	svc	0
	ldr	w11, [x13, 4]
	ldr	w12, [x13, 12]
	add	x29, x29, 16
	cmp	x0, 0
	b.ge	.Lpoll_revents
	cmp	x0, -11
	b.eq	.Lresume_zero
	cmp	x0, -4
	b.eq	.Lresume_zero
	movz	x0, 13, lsl #0
	b	.Lexit

.Lpoll_revents:
	lsr	x11, x11, 16
	lsr	x12, x12, 16
	and	x11, x11, 65535
	and	x12, x12, 65535
	movz	x9, 8208, lsl #0
	and	x9, x9, x11
	cmp	x9, 0
	b.ne	.Lresume_zero
	mov	x9, x11
	and	x9, x9, -2
	cmp	x9, 0
	b.ne	.Lexit
	mov	x9, x12
	and	x9, x9, -5
	cmp	x9, 0
	b.ne	.Lexit
	mov	x0, x11
	orr	x0, x0, x12
	b	.Lresume

.globl	rt_read
.type	rt_read,@function

rt_read:
	str	lr, [x29, -8]!
	ldr	w2, [x29, 8]
	cmp	x2, 0
	b.eq	.Lresume_zero
	ldr	x12, [x27, -32]
	ldr	w1, [x29, 16]
	add	x1, x12, x1
	add	x0, x1, x2
	mov	x8, x28
	movn	x9, 1, lsl #0
	movk	x9, 49151, lsl #48
	and	x8, x8, x9
	lsl	x8, x8, 4
	mov	x9, GATE_STACK_LIMIT_OFFSET
	sub	x8, x8, x9
	ldr	w11, [x8, 4]
	lsl	x11, x11, 16
	add	x11, x12, x11
	cmp	x0, x11
	b.gt	.Lout_of_bounds
	cmp	x0, x1
	b.lt	.Lout_of_bounds
	mov	x0, 0
	mov	w8, 63
	svc	0
	cmp	x0, 0
	b.ge	.Lresume
	cmp	x0, -11
	b.eq	.Lresume_zero
	cmp	x0, -4
	b.eq	.Lresume_zero
	movz	x0, 4, lsl #0
	b	.Lexit

.globl	rt_write
.type	rt_write,@function

rt_write:
	str	lr, [x29, -8]!
	ldr	w2, [x29, 8]
	cmp	x2, 0
	b.eq	.Lresume_zero
	ldr	x12, [x27, -32]
	ldr	w1, [x29, 16]
	add	x1, x12, x1
	add	x0, x1, x2
	mov	x8, x28
	movn	x9, 1, lsl #0
	movk	x9, 49151, lsl #48
	and	x8, x8, x9
	lsl	x8, x8, 4
	mov	x9, GATE_STACK_LIMIT_OFFSET
	sub	x8, x8, x9
	ldr	w11, [x8, 4]
	lsl	x11, x11, 16
	add	x11, x12, x11
	cmp	x0, x11
	b.gt	.Lout_of_bounds
	cmp	x0, x1
	b.lt	.Lout_of_bounds
	movz	x0, 1, lsl #0
	mov	w8, 64
	svc	0
	cmp	x0, 0
	b.gt	.Lresume
	cmp	x0, -11
	b.eq	.Lresume_zero
	cmp	x0, -4
	b.eq	.Lresume_zero
	movz	x0, 6, lsl #0
	b	.Lexit

.Lout_of_bounds:
	movz	x0, 105, lsl #0
	b	.Lexit

.globl	rt_time
.type	rt_time,@function

rt_time:
	str	lr, [x29, -8]!
	ldr	w0, [x29, 8]
	sub	x29, x29, 16
	mov	x1, x29
	mov	x11, x28
	movn	x9, 1, lsl #0
	movk	x9, 49151, lsl #48
	and	x11, x11, x9
	lsl	x11, x11, 4
	mov	x9, GATE_STACK_LIMIT_OFFSET
	sub	x11, x11, x9
	ldr	x9, [x27, -88]
	bl	trampoline
	mov	x14, x0

.Lrt_time_not_suspended:
	ldr	x12, [x29], 8
	ldr	x13, [x29], 8
	movz	x0, 12, lsl #0
	mov	x1, -1
	cmp	x14, 0
	b.ne	.Lexit_time
	ldr	x9, [x27, -72]
	and	x13, x13, x9
	movz	x9, 25856, lsl #0
	movk	x9, 7629, lsl #16
	mul	x14, x12, x9
	lsl	x14, x14, 1
	add	x0, x14, x13
	ldr	w9, [x29, 8]
	cmp	x9, 6
	b.ne	.Lresume
	ldr	x9, [x27, -80]
	sub	x0, x0, x9
	ldr	x9, [x11, 8]
	add	x0, x0, x9
	b	.Lresume

.globl	rt_timemask
.type	rt_timemask,@function

rt_timemask:
	str	lr, [x29, -8]!
	ldr	x0, [x27, -72]
	b	.Lresume

.globl	rt_random
.type	rt_random,@function

rt_random:
	str	lr, [x29, -8]!
	mov	x11, x28
	movn	x9, 1, lsl #0
	movk	x9, 49151, lsl #48
	and	x11, x11, x9
	lsl	x11, x11, 4
	mov	x9, GATE_STACK_LIMIT_OFFSET
	sub	x11, x11, x9
	ldr	w12, [x11, 16]
	cmp	x12, 0
	b.eq	.Lno_random
	sub	x12, x12, 1
	str	w12, [x11, 16]
	add	x12, x12, x27
	ldurb	w0, [x12, -64]
	b	.Lresume

.Lno_random:
	mov	x0, -1
	b	.Lresume

.globl	rt_trap
.type	rt_trap,@function

rt_trap:
	str	lr, [x29, -8]!
	ldr	w0, [x29, 8]
	mov	x29, x3

.Lexit:
	str	x0, [x29, -8]!
	movz	x0, 6, lsl #0
	sub	x29, x29, 16
	mov	x1, x29
	mov	x11, x28
	movn	x9, 1, lsl #0
	movk	x9, 49151, lsl #48
	and	x11, x11, x9
	lsl	x11, x11, 4
	mov	x9, GATE_STACK_LIMIT_OFFSET
	sub	x11, x11, x9
	ldr	x9, [x27, -88]
	bl	trampoline
	mov	x14, x0

.Lrt_trap_not_suspended:
	ldr	x12, [x29], 8
	ldr	x13, [x29], 8
	movz	x0, 12, lsl #0
	mov	x1, -1
	cmp	x14, 0
	b.ne	.Lexit_time
	ldr	x9, [x27, -72]
	and	x13, x13, x9
	movz	x9, 25856, lsl #0
	movk	x9, 7629, lsl #16
	mul	x14, x12, x9
	lsl	x14, x14, 1
	add	x0, x14, x13
	ldr	x9, [x27, -80]
	sub	x0, x0, x9
	ldr	x9, [x11, 8]
	add	x0, x0, x9
	mov	x1, x0
	ldr	x0, [x29], 8

.Lexit_time:
	mov	x11, x28
	movn	x9, 1, lsl #0
	movk	x9, 49151, lsl #48
	and	x11, x11, x9
	lsl	x11, x11, 4
	mov	x9, GATE_STACK_LIMIT_OFFSET
	sub	x11, x11, x9
	mov	x12, x29
	sub	x12, x12, x11
	str	w12, [x11, 0]
	str	x1, [x11, 8]

.globl	sys_exit
.type	sys_exit,@function

sys_exit:
	mov	w8, 94
	svc	0
	brk	0

.globl	rt_debug
.type	rt_debug,@function

rt_debug:
	str	lr, [x29, -8]!
	ldr	w13, [x29, 8]
	cmp	x13, 0
	b.eq	.Lresume_zero
	ldr	x1, [x27, -32]
	ldr	w12, [x29, 16]
	add	x12, x1, x12
	add	x11, x12, x13
	mov	x8, x28
	movn	x9, 1, lsl #0
	movk	x9, 49151, lsl #48
	and	x8, x8, x9
	lsl	x8, x8, 4
	mov	x9, GATE_STACK_LIMIT_OFFSET
	sub	x8, x8, x9
	ldr	w0, [x8, 4]
	lsl	x0, x0, 16
	add	x0, x1, x0
	cmp	x11, x0
	b.gt	.Lout_of_bounds
	cmp	x11, x12
	b.lt	.Lout_of_bounds

.Ldebug_loop:
	movz	x0, 2, lsl #0
	mov	x1, x12
	mov	x2, x13
	mov	w8, 64
	svc	0
	cmp	x0, 0
	b.gt	.Ldebugged_some
	cmp	x0, 0
	b.eq	.Lresume
	cmp	x0, -4
	b.eq	.Ldebug_loop
	movz	x0, 8, lsl #0
	b	.Lexit

.Ldebugged_some:
	sub	x13, x13, x0
	cmp	x13, 0
	b.eq	.Lresume_zero
	add	x12, x12, x0
	b	.Ldebug_loop

.globl	rt_read8
.type	rt_read8,@function

rt_read8:
	str	lr, [x29, -8]!
	sub	x29, x29, 8

.Lread8_retry:
	mov	x0, 0
	mov	x1, x29
	movz	x2, 8, lsl #0
	mov	w8, 63
	svc	0
	mov	x12, x0
	cmp	x12, -11
	b.eq	.Lread8_retry
	cmp	x12, -4
	b.eq	.Lread8_retry
	ldr	x11, [x29], 8
	movz	x0, 5, lsl #0
	cmp	x12, 8
	b.ne	.Lexit
	mov	x0, x11
	b	.Lresume

.globl	rt_write8
.type	rt_write8,@function

rt_write8:
	str	lr, [x29, -8]!

.Lwrite8_retry:
	movz	x0, 1, lsl #0
	add	x1, x29, 8
	movz	x2, 8, lsl #0
	mov	w8, 64
	svc	0
	cmp	x0, 8
	b.eq	.Lresume_zero
	cmp	x0, -11
	b.eq	.Lwrite8_retry
	cmp	x0, -4
	b.eq	.Lwrite8_retry
	movz	x0, 7, lsl #0
	b	.Lexit
