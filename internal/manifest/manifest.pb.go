// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: internal/manifest/manifest.proto

package manifest

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ByteRange struct {
	Offset               int64    `protobuf:"varint,1,opt,name=offset,proto3" json:"offset,omitempty"`
	Length               int64    `protobuf:"varint,2,opt,name=length,proto3" json:"length,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ByteRange) Reset()         { *m = ByteRange{} }
func (m *ByteRange) String() string { return proto.CompactTextString(m) }
func (*ByteRange) ProtoMessage()    {}
func (*ByteRange) Descriptor() ([]byte, []int) {
	return fileDescriptor_73f8b8aaec63e03a, []int{0}
}
func (m *ByteRange) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ByteRange) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ByteRange.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ByteRange) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ByteRange.Merge(m, src)
}
func (m *ByteRange) XXX_Size() int {
	return m.Size()
}
func (m *ByteRange) XXX_DiscardUnknown() {
	xxx_messageInfo_ByteRange.DiscardUnknown(m)
}

var xxx_messageInfo_ByteRange proto.InternalMessageInfo

type Program struct {
	LibraryChecksum           uint64            `protobuf:"fixed64,1,opt,name=library_checksum,json=libraryChecksum,proto3" json:"library_checksum,omitempty"`
	TextRevision              int32             `protobuf:"varint,2,opt,name=text_revision,json=textRevision,proto3" json:"text_revision,omitempty"`
	TextAddr                  uint64            `protobuf:"varint,3,opt,name=text_addr,json=textAddr,proto3" json:"text_addr,omitempty"`
	TextSize                  uint32            `protobuf:"varint,4,opt,name=text_size,json=textSize,proto3" json:"text_size,omitempty"`
	StackUsage                uint32            `protobuf:"varint,5,opt,name=stack_usage,json=stackUsage,proto3" json:"stack_usage,omitempty"`
	GlobalsSize               uint32            `protobuf:"varint,6,opt,name=globals_size,json=globalsSize,proto3" json:"globals_size,omitempty"`
	MemorySize                uint32            `protobuf:"varint,7,opt,name=memory_size,json=memorySize,proto3" json:"memory_size,omitempty"`
	MemorySizeLimit           int64             `protobuf:"zigzag64,8,opt,name=memory_size_limit,json=memorySizeLimit,proto3" json:"memory_size_limit,omitempty"`
	MemoryDataSize            uint32            `protobuf:"varint,9,opt,name=memory_data_size,json=memoryDataSize,proto3" json:"memory_data_size,omitempty"`
	ModuleSize                int64             `protobuf:"varint,10,opt,name=module_size,json=moduleSize,proto3" json:"module_size,omitempty"`
	Sections                  []ByteRange       `protobuf:"bytes,11,rep,name=sections,proto3" json:"sections"`
	SnapshotSection           ByteRange         `protobuf:"bytes,12,opt,name=snapshot_section,json=snapshotSection,proto3" json:"snapshot_section"`
	ExportSectionWrap         ByteRange         `protobuf:"bytes,13,opt,name=export_section_wrap,json=exportSectionWrap,proto3" json:"export_section_wrap"`
	BufferSection             ByteRange         `protobuf:"bytes,14,opt,name=buffer_section,json=bufferSection,proto3" json:"buffer_section"`
	BufferSectionHeaderLength int64             `protobuf:"varint,15,opt,name=buffer_section_header_length,json=bufferSectionHeaderLength,proto3" json:"buffer_section_header_length,omitempty"`
	StackSection              ByteRange         `protobuf:"bytes,16,opt,name=stack_section,json=stackSection,proto3" json:"stack_section"`
	GlobalTypes               []byte            `protobuf:"bytes,17,opt,name=global_types,json=globalTypes,proto3" json:"global_types,omitempty"`
	StartFunc                 Function          `protobuf:"bytes,18,opt,name=start_func,json=startFunc,proto3" json:"start_func"`
	EntryIndexes              map[string]uint32 `protobuf:"bytes,19,rep,name=entry_indexes,json=entryIndexes,proto3" json:"entry_indexes" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	EntryAddrs                map[uint32]uint32 `protobuf:"bytes,20,rep,name=entry_addrs,json=entryAddrs,proto3" json:"entry_addrs" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	CallSitesSize             uint32            `protobuf:"varint,21,opt,name=call_sites_size,json=callSitesSize,proto3" json:"call_sites_size,omitempty"`
	FuncAddrsSize             uint32            `protobuf:"varint,22,opt,name=func_addrs_size,json=funcAddrsSize,proto3" json:"func_addrs_size,omitempty"`
	Random                    bool              `protobuf:"varint,23,opt,name=random,proto3" json:"random,omitempty"`
	Snapshot                  Snapshot          `protobuf:"bytes,24,opt,name=snapshot,proto3" json:"snapshot"`
	XXX_NoUnkeyedLiteral      struct{}          `json:"-"`
	XXX_sizecache             int32             `json:"-"`
}

func (m *Program) Reset()         { *m = Program{} }
func (m *Program) String() string { return proto.CompactTextString(m) }
func (*Program) ProtoMessage()    {}
func (*Program) Descriptor() ([]byte, []int) {
	return fileDescriptor_73f8b8aaec63e03a, []int{1}
}
func (m *Program) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Program) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Program.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Program) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Program.Merge(m, src)
}
func (m *Program) XXX_Size() int {
	return m.Size()
}
func (m *Program) XXX_DiscardUnknown() {
	xxx_messageInfo_Program.DiscardUnknown(m)
}

var xxx_messageInfo_Program proto.InternalMessageInfo

type Instance struct {
	TextAddr             uint64   `protobuf:"varint,1,opt,name=text_addr,json=textAddr,proto3" json:"text_addr,omitempty"`
	StackSize            uint32   `protobuf:"varint,2,opt,name=stack_size,json=stackSize,proto3" json:"stack_size,omitempty"`
	StackUsage           uint32   `protobuf:"varint,3,opt,name=stack_usage,json=stackUsage,proto3" json:"stack_usage,omitempty"`
	GlobalsSize          uint32   `protobuf:"varint,4,opt,name=globals_size,json=globalsSize,proto3" json:"globals_size,omitempty"`
	MemorySize           uint32   `protobuf:"varint,5,opt,name=memory_size,json=memorySize,proto3" json:"memory_size,omitempty"`
	MaxMemorySize        uint32   `protobuf:"varint,6,opt,name=max_memory_size,json=maxMemorySize,proto3" json:"max_memory_size,omitempty"`
	InitRoutine          uint32   `protobuf:"varint,7,opt,name=init_routine,json=initRoutine,proto3" json:"init_routine,omitempty"`
	StartFunc            Function `protobuf:"bytes,8,opt,name=start_func,json=startFunc,proto3" json:"start_func"`
	EntryFunc            Function `protobuf:"bytes,9,opt,name=entry_func,json=entryFunc,proto3" json:"entry_func"`
	Snapshot             Snapshot `protobuf:"bytes,10,opt,name=snapshot,proto3" json:"snapshot"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Instance) Reset()         { *m = Instance{} }
func (m *Instance) String() string { return proto.CompactTextString(m) }
func (*Instance) ProtoMessage()    {}
func (*Instance) Descriptor() ([]byte, []int) {
	return fileDescriptor_73f8b8aaec63e03a, []int{2}
}
func (m *Instance) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Instance) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Instance.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Instance) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Instance.Merge(m, src)
}
func (m *Instance) XXX_Size() int {
	return m.Size()
}
func (m *Instance) XXX_DiscardUnknown() {
	xxx_messageInfo_Instance.DiscardUnknown(m)
}

var xxx_messageInfo_Instance proto.InternalMessageInfo

type Function struct {
	Index                int64    `protobuf:"zigzag64,1,opt,name=index,proto3" json:"index,omitempty"`
	Addr                 uint32   `protobuf:"varint,2,opt,name=addr,proto3" json:"addr,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Function) Reset()         { *m = Function{} }
func (m *Function) String() string { return proto.CompactTextString(m) }
func (*Function) ProtoMessage()    {}
func (*Function) Descriptor() ([]byte, []int) {
	return fileDescriptor_73f8b8aaec63e03a, []int{3}
}
func (m *Function) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Function) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Function.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Function) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Function.Merge(m, src)
}
func (m *Function) XXX_Size() int {
	return m.Size()
}
func (m *Function) XXX_DiscardUnknown() {
	xxx_messageInfo_Function.DiscardUnknown(m)
}

var xxx_messageInfo_Function proto.InternalMessageInfo

type Snapshot struct {
	Flags                uint64      `protobuf:"varint,1,opt,name=flags,proto3" json:"flags,omitempty"`
	Trap                 int32       `protobuf:"varint,2,opt,name=trap,proto3" json:"trap,omitempty"`
	Result               int32       `protobuf:"varint,3,opt,name=result,proto3" json:"result,omitempty"`
	MonotonicTime        uint64      `protobuf:"varint,4,opt,name=monotonic_time,json=monotonicTime,proto3" json:"monotonic_time,omitempty"`
	Breakpoints          Breakpoints `protobuf:"bytes,5,opt,name=breakpoints,proto3" json:"breakpoints"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *Snapshot) Reset()         { *m = Snapshot{} }
func (m *Snapshot) String() string { return proto.CompactTextString(m) }
func (*Snapshot) ProtoMessage()    {}
func (*Snapshot) Descriptor() ([]byte, []int) {
	return fileDescriptor_73f8b8aaec63e03a, []int{4}
}
func (m *Snapshot) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Snapshot) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Snapshot.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Snapshot) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Snapshot.Merge(m, src)
}
func (m *Snapshot) XXX_Size() int {
	return m.Size()
}
func (m *Snapshot) XXX_DiscardUnknown() {
	xxx_messageInfo_Snapshot.DiscardUnknown(m)
}

var xxx_messageInfo_Snapshot proto.InternalMessageInfo

type Breakpoints struct {
	Offsets              []uint64 `protobuf:"varint,1,rep,packed,name=offsets,proto3" json:"offsets,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Breakpoints) Reset()         { *m = Breakpoints{} }
func (m *Breakpoints) String() string { return proto.CompactTextString(m) }
func (*Breakpoints) ProtoMessage()    {}
func (*Breakpoints) Descriptor() ([]byte, []int) {
	return fileDescriptor_73f8b8aaec63e03a, []int{5}
}
func (m *Breakpoints) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Breakpoints) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Breakpoints.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Breakpoints) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Breakpoints.Merge(m, src)
}
func (m *Breakpoints) XXX_Size() int {
	return m.Size()
}
func (m *Breakpoints) XXX_DiscardUnknown() {
	xxx_messageInfo_Breakpoints.DiscardUnknown(m)
}

var xxx_messageInfo_Breakpoints proto.InternalMessageInfo

func init() {
	proto.RegisterType((*ByteRange)(nil), "manifest.ByteRange")
	proto.RegisterType((*Program)(nil), "manifest.Program")
	proto.RegisterMapType((map[uint32]uint32)(nil), "manifest.Program.EntryAddrsEntry")
	proto.RegisterMapType((map[string]uint32)(nil), "manifest.Program.EntryIndexesEntry")
	proto.RegisterType((*Instance)(nil), "manifest.Instance")
	proto.RegisterType((*Function)(nil), "manifest.Function")
	proto.RegisterType((*Snapshot)(nil), "manifest.Snapshot")
	proto.RegisterType((*Breakpoints)(nil), "manifest.Breakpoints")
}

func init() { proto.RegisterFile("internal/manifest/manifest.proto", fileDescriptor_73f8b8aaec63e03a) }

var fileDescriptor_73f8b8aaec63e03a = []byte{
	// 942 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x56, 0xdd, 0x6e, 0x1b, 0x45,
	0x14, 0xce, 0xd6, 0x3f, 0x59, 0x1f, 0x7b, 0x63, 0x67, 0xd2, 0x86, 0xa5, 0x80, 0xeb, 0xb8, 0x10,
	0x0c, 0x17, 0x89, 0x54, 0x8a, 0x8a, 0x8a, 0x4a, 0x21, 0x14, 0xd4, 0x48, 0x05, 0xa1, 0x4d, 0x11,
	0x12, 0x37, 0xab, 0xb1, 0x3d, 0x76, 0x46, 0xd9, 0x9d, 0xb5, 0x66, 0x66, 0x8b, 0xdd, 0x87, 0x40,
	0x3c, 0x01, 0x0f, 0xc1, 0x53, 0xe4, 0x92, 0x27, 0x40, 0x10, 0x5e, 0x04, 0xcd, 0x99, 0xd9, 0xb5,
	0x93, 0x00, 0xce, 0xdd, 0x9c, 0x6f, 0xbe, 0xf3, 0xed, 0xd9, 0x39, 0xdf, 0x9c, 0x5d, 0xe8, 0x71,
	0xa1, 0x99, 0x14, 0x34, 0x39, 0x4c, 0xa9, 0xe0, 0x13, 0xa6, 0x74, 0xb9, 0x38, 0x98, 0xc9, 0x4c,
	0x67, 0xc4, 0x2f, 0xe2, 0xfe, 0xa7, 0xd0, 0x38, 0x5a, 0x68, 0x16, 0x51, 0x31, 0x65, 0x64, 0x17,
	0xea, 0xd9, 0x64, 0xa2, 0x98, 0x0e, 0xbd, 0x9e, 0x37, 0xa8, 0x44, 0x2e, 0x32, 0x78, 0xc2, 0xc4,
	0x54, 0x9f, 0x86, 0xb7, 0x2c, 0x6e, 0xa3, 0xfe, 0xcf, 0x00, 0x9b, 0xdf, 0xc9, 0x6c, 0x2a, 0x69,
	0x4a, 0x3e, 0x80, 0x4e, 0xc2, 0x87, 0x92, 0xca, 0x45, 0x3c, 0x3a, 0x65, 0xa3, 0x33, 0x95, 0xa7,
	0xa8, 0x52, 0x8f, 0xda, 0x0e, 0xff, 0xd2, 0xc1, 0xe4, 0x3e, 0x04, 0x9a, 0xcd, 0x75, 0x2c, 0xd9,
	0x2b, 0xae, 0x78, 0x26, 0x50, 0xb5, 0x16, 0xb5, 0x0c, 0x18, 0x39, 0x8c, 0xbc, 0x05, 0x0d, 0x24,
	0xd1, 0xf1, 0x58, 0x86, 0x95, 0x9e, 0x37, 0xa8, 0x46, 0xbe, 0x01, 0xbe, 0x18, 0x8f, 0x65, 0xb9,
	0xa9, 0xf8, 0x6b, 0x16, 0x56, 0x7b, 0xde, 0x20, 0xb0, 0x9b, 0x27, 0xfc, 0x35, 0x23, 0xf7, 0xa0,
	0xa9, 0x34, 0x1d, 0x9d, 0xc5, 0xb9, 0xa2, 0x53, 0x16, 0xd6, 0x70, 0x1b, 0x10, 0xfa, 0xde, 0x20,
	0x64, 0x0f, 0x5a, 0xd3, 0x24, 0x1b, 0xd2, 0x44, 0x59, 0x81, 0x3a, 0x32, 0x9a, 0x0e, 0x2b, 0x34,
	0x52, 0x96, 0x66, 0x72, 0x61, 0x19, 0x9b, 0x56, 0xc3, 0x42, 0x48, 0xf8, 0x10, 0xb6, 0x57, 0x08,
	0x71, 0xc2, 0x53, 0xae, 0x43, 0xbf, 0xe7, 0x0d, 0x48, 0xd4, 0x5e, 0xd2, 0x5e, 0x18, 0x98, 0x0c,
	0xa0, 0xe3, 0xb8, 0x63, 0xaa, 0xa9, 0x55, 0x6c, 0xa0, 0xe2, 0x96, 0xc5, 0x9f, 0x51, 0x4d, 0xcb,
	0xc7, 0x66, 0xe3, 0x3c, 0x61, 0x96, 0x04, 0x78, 0xda, 0x60, 0x21, 0x24, 0x7c, 0x0c, 0xbe, 0x62,
	0x23, 0xcd, 0x33, 0xa1, 0xc2, 0x66, 0xaf, 0x32, 0x68, 0x3e, 0xd8, 0x39, 0x28, 0x7b, 0x5b, 0x36,
	0xf2, 0xa8, 0x7a, 0xfe, 0xc7, 0xbd, 0x8d, 0xa8, 0xa4, 0x92, 0x67, 0xd0, 0x51, 0x82, 0xce, 0xd4,
	0x69, 0xa6, 0x63, 0x07, 0x86, 0xad, 0x9e, 0xf7, 0xff, 0xe9, 0xed, 0x22, 0xe5, 0xc4, 0x66, 0x90,
	0x63, 0xd8, 0x61, 0xf3, 0x59, 0x26, 0x4b, 0x8d, 0xf8, 0x27, 0x49, 0x67, 0x61, 0xb0, 0x4e, 0x68,
	0xdb, 0x66, 0x39, 0x99, 0x1f, 0x24, 0x9d, 0x91, 0xcf, 0x61, 0x6b, 0x98, 0x4f, 0x26, 0x4c, 0x96,
	0xe5, 0x6c, 0xad, 0x53, 0x09, 0x6c, 0x42, 0x51, 0xcc, 0x53, 0x78, 0xfb, 0xb2, 0x42, 0x7c, 0xca,
	0xe8, 0x98, 0xc9, 0xd8, 0x39, 0xb5, 0x8d, 0x67, 0xf7, 0xe6, 0xa5, 0xa4, 0xe7, 0xc8, 0x78, 0x81,
	0x04, 0xf2, 0x19, 0x04, 0xd6, 0x26, 0x45, 0x05, 0x9d, 0x75, 0x15, 0xb4, 0x90, 0x5f, 0x14, 0x50,
	0xba, 0x28, 0xd6, 0x8b, 0x19, 0x53, 0xe1, 0x76, 0xcf, 0x1b, 0xb4, 0x0a, 0x17, 0xbd, 0x34, 0x10,
	0x79, 0x04, 0xc6, 0x76, 0x52, 0xc7, 0x93, 0x5c, 0x8c, 0x42, 0x82, 0xfa, 0x64, 0xa9, 0xff, 0x75,
	0x2e, 0x50, 0xca, 0xc9, 0x37, 0x90, 0x6b, 0x40, 0xf2, 0x2d, 0x04, 0x4c, 0x68, 0xb9, 0x88, 0xb9,
	0x18, 0xb3, 0x39, 0x53, 0xe1, 0x0e, 0xf6, 0xfa, 0xfe, 0x32, 0xd7, 0x5d, 0xbb, 0x83, 0xaf, 0x0c,
	0xed, 0xd8, 0xb2, 0x70, 0x5d, 0xd4, 0xca, 0x56, 0x36, 0xc8, 0x73, 0x68, 0x5a, 0x3d, 0x73, 0x9b,
	0x54, 0x78, 0x1b, 0xd5, 0xf6, 0xfe, 0x43, 0xcd, 0xdc, 0xb0, 0x4b, 0x5a, 0xc0, 0x4a, 0x98, 0xec,
	0x43, 0x7b, 0x44, 0x93, 0x24, 0x56, 0x5c, 0x33, 0x77, 0x7d, 0xee, 0xa0, 0x95, 0x03, 0x03, 0x9f,
	0x18, 0x14, 0x8d, 0xba, 0x0f, 0x6d, 0xf3, 0xd2, 0xf6, 0x81, 0x96, 0xb7, 0x6b, 0x79, 0x06, 0x46,
	0x2d, 0xe4, 0xed, 0x42, 0x5d, 0x52, 0x31, 0xce, 0xd2, 0xf0, 0x8d, 0x9e, 0x37, 0xf0, 0x23, 0x17,
	0x91, 0x87, 0xe0, 0x17, 0xf6, 0x0b, 0xc3, 0xab, 0x07, 0x77, 0xe2, 0x76, 0x4a, 0x9f, 0xbb, 0xf8,
	0xee, 0x53, 0xd8, 0xbe, 0x76, 0x20, 0xa4, 0x03, 0x95, 0x33, 0xb6, 0xc0, 0x61, 0xd4, 0x88, 0xcc,
	0x92, 0xdc, 0x86, 0xda, 0x2b, 0x9a, 0xe4, 0x0c, 0x07, 0x4f, 0x10, 0xd9, 0xe0, 0xf1, 0xad, 0x4f,
	0xbc, 0xbb, 0x4f, 0xa0, 0x7d, 0xe5, 0x0c, 0x56, 0xd3, 0x83, 0x35, 0xe9, 0xfd, 0x5f, 0x2b, 0xe0,
	0x1f, 0x0b, 0xa5, 0xa9, 0x18, 0xb1, 0xcb, 0x13, 0xcc, 0xbb, 0x32, 0xc1, 0xde, 0x01, 0x70, 0xee,
	0x33, 0x47, 0x63, 0x85, 0x1a, 0xd6, 0x5f, 0xff, 0x32, 0xc3, 0x2a, 0x6b, 0x67, 0x58, 0x75, 0xed,
	0x0c, 0xab, 0x5d, 0x9b, 0x61, 0xfb, 0xd0, 0x4e, 0xe9, 0x3c, 0x5e, 0x25, 0xd9, 0x51, 0x18, 0xa4,
	0x74, 0xfe, 0xcd, 0x92, 0xb7, 0x07, 0x2d, 0x2e, 0xb8, 0x8e, 0x65, 0x96, 0x6b, 0x2e, 0x8a, 0x69,
	0xd8, 0x34, 0x58, 0x64, 0xa1, 0x2b, 0x4e, 0xf7, 0x6f, 0xee, 0xf4, 0x47, 0x60, 0xdd, 0x65, 0x13,
	0x1b, 0xeb, 0x12, 0x91, 0x8b, 0x89, 0xab, 0x06, 0x81, 0x9b, 0x1a, 0xa4, 0xff, 0x10, 0xfc, 0x42,
	0xd2, 0xb4, 0x11, 0xaf, 0x17, 0xf6, 0x86, 0x44, 0x36, 0x20, 0x04, 0xaa, 0xd8, 0x30, 0xdb, 0x12,
	0x5c, 0xf7, 0x7f, 0xf3, 0xc0, 0x2f, 0x24, 0x4d, 0xda, 0x24, 0xa1, 0x53, 0xe5, 0x5a, 0x6a, 0x03,
	0x93, 0xa6, 0xcd, 0x30, 0xb4, 0x9f, 0x32, 0x5c, 0xa3, 0xb7, 0x99, 0xca, 0x13, 0x8d, 0xfd, 0xab,
	0x45, 0x2e, 0x22, 0xef, 0xc1, 0x56, 0x9a, 0x89, 0x4c, 0x67, 0x82, 0x8f, 0x62, 0xcd, 0x53, 0xdb,
	0xbd, 0x6a, 0x14, 0x94, 0xe8, 0x4b, 0x9e, 0x32, 0xf2, 0x04, 0x9a, 0x43, 0xc9, 0xe8, 0xd9, 0x2c,
	0xe3, 0x42, 0x2b, 0xec, 0x5f, 0xf3, 0xc1, 0x9d, 0x95, 0xf1, 0xb4, 0xdc, 0x74, 0xef, 0xb9, 0xca,
	0xef, 0xbf, 0x0f, 0xcd, 0x15, 0x06, 0x09, 0x61, 0xd3, 0x7e, 0xcd, 0x4d, 0xe1, 0x95, 0x41, 0x35,
	0x2a, 0xc2, 0xa3, 0xc7, 0xe7, 0x7f, 0x75, 0x37, 0xce, 0x2f, 0xba, 0xde, 0xef, 0x17, 0x5d, 0xef,
	0xcf, 0x8b, 0xae, 0xf7, 0xcb, 0xdf, 0xdd, 0x8d, 0x1f, 0xdf, 0x9d, 0x52, 0xcd, 0x0e, 0x46, 0x59,
	0x3a, 0xcb, 0x35, 0x93, 0x87, 0x26, 0x3a, 0xbc, 0xf6, 0x5f, 0x31, 0xac, 0xe3, 0xff, 0xc4, 0x47,
	0xff, 0x04, 0x00, 0x00, 0xff, 0xff, 0xb0, 0xbc, 0x38, 0xed, 0x73, 0x08, 0x00, 0x00,
}

func (m *ByteRange) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ByteRange) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ByteRange) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Length != 0 {
		i = encodeVarintManifest(dAtA, i, uint64(m.Length))
		i--
		dAtA[i] = 0x10
	}
	if m.Offset != 0 {
		i = encodeVarintManifest(dAtA, i, uint64(m.Offset))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Program) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Program) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Program) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Snapshot.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintManifest(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0xc2
	if m.Random {
		i--
		if m.Random {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb8
	}
	if m.FuncAddrsSize != 0 {
		i = encodeVarintManifest(dAtA, i, uint64(m.FuncAddrsSize))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb0
	}
	if m.CallSitesSize != 0 {
		i = encodeVarintManifest(dAtA, i, uint64(m.CallSitesSize))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa8
	}
	if len(m.EntryAddrs) > 0 {
		for k := range m.EntryAddrs {
			v := m.EntryAddrs[k]
			baseI := i
			i = encodeVarintManifest(dAtA, i, uint64(v))
			i--
			dAtA[i] = 0x10
			i = encodeVarintManifest(dAtA, i, uint64(k))
			i--
			dAtA[i] = 0x8
			i = encodeVarintManifest(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xa2
		}
	}
	if len(m.EntryIndexes) > 0 {
		for k := range m.EntryIndexes {
			v := m.EntryIndexes[k]
			baseI := i
			i = encodeVarintManifest(dAtA, i, uint64(v))
			i--
			dAtA[i] = 0x10
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintManifest(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintManifest(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x9a
		}
	}
	{
		size, err := m.StartFunc.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintManifest(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0x92
	if len(m.GlobalTypes) > 0 {
		i -= len(m.GlobalTypes)
		copy(dAtA[i:], m.GlobalTypes)
		i = encodeVarintManifest(dAtA, i, uint64(len(m.GlobalTypes)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	{
		size, err := m.StackSection.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintManifest(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1
	i--
	dAtA[i] = 0x82
	if m.BufferSectionHeaderLength != 0 {
		i = encodeVarintManifest(dAtA, i, uint64(m.BufferSectionHeaderLength))
		i--
		dAtA[i] = 0x78
	}
	{
		size, err := m.BufferSection.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintManifest(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x72
	{
		size, err := m.ExportSectionWrap.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintManifest(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x6a
	{
		size, err := m.SnapshotSection.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintManifest(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x62
	if len(m.Sections) > 0 {
		for iNdEx := len(m.Sections) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Sections[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintManifest(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x5a
		}
	}
	if m.ModuleSize != 0 {
		i = encodeVarintManifest(dAtA, i, uint64(m.ModuleSize))
		i--
		dAtA[i] = 0x50
	}
	if m.MemoryDataSize != 0 {
		i = encodeVarintManifest(dAtA, i, uint64(m.MemoryDataSize))
		i--
		dAtA[i] = 0x48
	}
	if m.MemorySizeLimit != 0 {
		i = encodeVarintManifest(dAtA, i, uint64((uint64(m.MemorySizeLimit)<<1)^uint64((m.MemorySizeLimit>>63))))
		i--
		dAtA[i] = 0x40
	}
	if m.MemorySize != 0 {
		i = encodeVarintManifest(dAtA, i, uint64(m.MemorySize))
		i--
		dAtA[i] = 0x38
	}
	if m.GlobalsSize != 0 {
		i = encodeVarintManifest(dAtA, i, uint64(m.GlobalsSize))
		i--
		dAtA[i] = 0x30
	}
	if m.StackUsage != 0 {
		i = encodeVarintManifest(dAtA, i, uint64(m.StackUsage))
		i--
		dAtA[i] = 0x28
	}
	if m.TextSize != 0 {
		i = encodeVarintManifest(dAtA, i, uint64(m.TextSize))
		i--
		dAtA[i] = 0x20
	}
	if m.TextAddr != 0 {
		i = encodeVarintManifest(dAtA, i, uint64(m.TextAddr))
		i--
		dAtA[i] = 0x18
	}
	if m.TextRevision != 0 {
		i = encodeVarintManifest(dAtA, i, uint64(m.TextRevision))
		i--
		dAtA[i] = 0x10
	}
	if m.LibraryChecksum != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(m.LibraryChecksum))
		i--
		dAtA[i] = 0x9
	}
	return len(dAtA) - i, nil
}

func (m *Instance) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Instance) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Instance) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Snapshot.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintManifest(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x52
	{
		size, err := m.EntryFunc.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintManifest(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x4a
	{
		size, err := m.StartFunc.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintManifest(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x42
	if m.InitRoutine != 0 {
		i = encodeVarintManifest(dAtA, i, uint64(m.InitRoutine))
		i--
		dAtA[i] = 0x38
	}
	if m.MaxMemorySize != 0 {
		i = encodeVarintManifest(dAtA, i, uint64(m.MaxMemorySize))
		i--
		dAtA[i] = 0x30
	}
	if m.MemorySize != 0 {
		i = encodeVarintManifest(dAtA, i, uint64(m.MemorySize))
		i--
		dAtA[i] = 0x28
	}
	if m.GlobalsSize != 0 {
		i = encodeVarintManifest(dAtA, i, uint64(m.GlobalsSize))
		i--
		dAtA[i] = 0x20
	}
	if m.StackUsage != 0 {
		i = encodeVarintManifest(dAtA, i, uint64(m.StackUsage))
		i--
		dAtA[i] = 0x18
	}
	if m.StackSize != 0 {
		i = encodeVarintManifest(dAtA, i, uint64(m.StackSize))
		i--
		dAtA[i] = 0x10
	}
	if m.TextAddr != 0 {
		i = encodeVarintManifest(dAtA, i, uint64(m.TextAddr))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Function) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Function) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Function) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Addr != 0 {
		i = encodeVarintManifest(dAtA, i, uint64(m.Addr))
		i--
		dAtA[i] = 0x10
	}
	if m.Index != 0 {
		i = encodeVarintManifest(dAtA, i, uint64((uint64(m.Index)<<1)^uint64((m.Index>>63))))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Snapshot) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Snapshot) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Snapshot) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Breakpoints.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintManifest(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	if m.MonotonicTime != 0 {
		i = encodeVarintManifest(dAtA, i, uint64(m.MonotonicTime))
		i--
		dAtA[i] = 0x20
	}
	if m.Result != 0 {
		i = encodeVarintManifest(dAtA, i, uint64(m.Result))
		i--
		dAtA[i] = 0x18
	}
	if m.Trap != 0 {
		i = encodeVarintManifest(dAtA, i, uint64(m.Trap))
		i--
		dAtA[i] = 0x10
	}
	if m.Flags != 0 {
		i = encodeVarintManifest(dAtA, i, uint64(m.Flags))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Breakpoints) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Breakpoints) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Breakpoints) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Offsets) > 0 {
		dAtA12 := make([]byte, len(m.Offsets)*10)
		var j11 int
		for _, num := range m.Offsets {
			for num >= 1<<7 {
				dAtA12[j11] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j11++
			}
			dAtA12[j11] = uint8(num)
			j11++
		}
		i -= j11
		copy(dAtA[i:], dAtA12[:j11])
		i = encodeVarintManifest(dAtA, i, uint64(j11))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintManifest(dAtA []byte, offset int, v uint64) int {
	offset -= sovManifest(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ByteRange) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Offset != 0 {
		n += 1 + sovManifest(uint64(m.Offset))
	}
	if m.Length != 0 {
		n += 1 + sovManifest(uint64(m.Length))
	}
	return n
}

func (m *Program) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LibraryChecksum != 0 {
		n += 9
	}
	if m.TextRevision != 0 {
		n += 1 + sovManifest(uint64(m.TextRevision))
	}
	if m.TextAddr != 0 {
		n += 1 + sovManifest(uint64(m.TextAddr))
	}
	if m.TextSize != 0 {
		n += 1 + sovManifest(uint64(m.TextSize))
	}
	if m.StackUsage != 0 {
		n += 1 + sovManifest(uint64(m.StackUsage))
	}
	if m.GlobalsSize != 0 {
		n += 1 + sovManifest(uint64(m.GlobalsSize))
	}
	if m.MemorySize != 0 {
		n += 1 + sovManifest(uint64(m.MemorySize))
	}
	if m.MemorySizeLimit != 0 {
		n += 1 + sozManifest(uint64(m.MemorySizeLimit))
	}
	if m.MemoryDataSize != 0 {
		n += 1 + sovManifest(uint64(m.MemoryDataSize))
	}
	if m.ModuleSize != 0 {
		n += 1 + sovManifest(uint64(m.ModuleSize))
	}
	if len(m.Sections) > 0 {
		for _, e := range m.Sections {
			l = e.Size()
			n += 1 + l + sovManifest(uint64(l))
		}
	}
	l = m.SnapshotSection.Size()
	n += 1 + l + sovManifest(uint64(l))
	l = m.ExportSectionWrap.Size()
	n += 1 + l + sovManifest(uint64(l))
	l = m.BufferSection.Size()
	n += 1 + l + sovManifest(uint64(l))
	if m.BufferSectionHeaderLength != 0 {
		n += 1 + sovManifest(uint64(m.BufferSectionHeaderLength))
	}
	l = m.StackSection.Size()
	n += 2 + l + sovManifest(uint64(l))
	l = len(m.GlobalTypes)
	if l > 0 {
		n += 2 + l + sovManifest(uint64(l))
	}
	l = m.StartFunc.Size()
	n += 2 + l + sovManifest(uint64(l))
	if len(m.EntryIndexes) > 0 {
		for k, v := range m.EntryIndexes {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovManifest(uint64(len(k))) + 1 + sovManifest(uint64(v))
			n += mapEntrySize + 2 + sovManifest(uint64(mapEntrySize))
		}
	}
	if len(m.EntryAddrs) > 0 {
		for k, v := range m.EntryAddrs {
			_ = k
			_ = v
			mapEntrySize := 1 + sovManifest(uint64(k)) + 1 + sovManifest(uint64(v))
			n += mapEntrySize + 2 + sovManifest(uint64(mapEntrySize))
		}
	}
	if m.CallSitesSize != 0 {
		n += 2 + sovManifest(uint64(m.CallSitesSize))
	}
	if m.FuncAddrsSize != 0 {
		n += 2 + sovManifest(uint64(m.FuncAddrsSize))
	}
	if m.Random {
		n += 3
	}
	l = m.Snapshot.Size()
	n += 2 + l + sovManifest(uint64(l))
	return n
}

func (m *Instance) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TextAddr != 0 {
		n += 1 + sovManifest(uint64(m.TextAddr))
	}
	if m.StackSize != 0 {
		n += 1 + sovManifest(uint64(m.StackSize))
	}
	if m.StackUsage != 0 {
		n += 1 + sovManifest(uint64(m.StackUsage))
	}
	if m.GlobalsSize != 0 {
		n += 1 + sovManifest(uint64(m.GlobalsSize))
	}
	if m.MemorySize != 0 {
		n += 1 + sovManifest(uint64(m.MemorySize))
	}
	if m.MaxMemorySize != 0 {
		n += 1 + sovManifest(uint64(m.MaxMemorySize))
	}
	if m.InitRoutine != 0 {
		n += 1 + sovManifest(uint64(m.InitRoutine))
	}
	l = m.StartFunc.Size()
	n += 1 + l + sovManifest(uint64(l))
	l = m.EntryFunc.Size()
	n += 1 + l + sovManifest(uint64(l))
	l = m.Snapshot.Size()
	n += 1 + l + sovManifest(uint64(l))
	return n
}

func (m *Function) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Index != 0 {
		n += 1 + sozManifest(uint64(m.Index))
	}
	if m.Addr != 0 {
		n += 1 + sovManifest(uint64(m.Addr))
	}
	return n
}

func (m *Snapshot) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Flags != 0 {
		n += 1 + sovManifest(uint64(m.Flags))
	}
	if m.Trap != 0 {
		n += 1 + sovManifest(uint64(m.Trap))
	}
	if m.Result != 0 {
		n += 1 + sovManifest(uint64(m.Result))
	}
	if m.MonotonicTime != 0 {
		n += 1 + sovManifest(uint64(m.MonotonicTime))
	}
	l = m.Breakpoints.Size()
	n += 1 + l + sovManifest(uint64(l))
	return n
}

func (m *Breakpoints) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Offsets) > 0 {
		l = 0
		for _, e := range m.Offsets {
			l += sovManifest(uint64(e))
		}
		n += 1 + sovManifest(uint64(l)) + l
	}
	return n
}

func sovManifest(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozManifest(x uint64) (n int) {
	return sovManifest(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ByteRange) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowManifest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ByteRange: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ByteRange: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			m.Offset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManifest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Offset |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Length", wireType)
			}
			m.Length = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManifest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Length |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipManifest(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthManifest
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthManifest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Program) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowManifest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Program: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Program: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field LibraryChecksum", wireType)
			}
			m.LibraryChecksum = 0
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			m.LibraryChecksum = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TextRevision", wireType)
			}
			m.TextRevision = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManifest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TextRevision |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TextAddr", wireType)
			}
			m.TextAddr = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManifest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TextAddr |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TextSize", wireType)
			}
			m.TextSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManifest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TextSize |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StackUsage", wireType)
			}
			m.StackUsage = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManifest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StackUsage |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GlobalsSize", wireType)
			}
			m.GlobalsSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManifest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GlobalsSize |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MemorySize", wireType)
			}
			m.MemorySize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManifest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MemorySize |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MemorySizeLimit", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManifest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			m.MemorySizeLimit = int64(v)
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MemoryDataSize", wireType)
			}
			m.MemoryDataSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManifest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MemoryDataSize |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModuleSize", wireType)
			}
			m.ModuleSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManifest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ModuleSize |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sections", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManifest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthManifest
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthManifest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sections = append(m.Sections, ByteRange{})
			if err := m.Sections[len(m.Sections)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SnapshotSection", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManifest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthManifest
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthManifest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SnapshotSection.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExportSectionWrap", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManifest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthManifest
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthManifest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ExportSectionWrap.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BufferSection", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManifest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthManifest
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthManifest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BufferSection.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BufferSectionHeaderLength", wireType)
			}
			m.BufferSectionHeaderLength = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManifest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BufferSectionHeaderLength |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StackSection", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManifest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthManifest
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthManifest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.StackSection.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GlobalTypes", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManifest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthManifest
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthManifest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GlobalTypes = append(m.GlobalTypes[:0], dAtA[iNdEx:postIndex]...)
			if m.GlobalTypes == nil {
				m.GlobalTypes = []byte{}
			}
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartFunc", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManifest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthManifest
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthManifest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.StartFunc.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 19:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EntryIndexes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManifest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthManifest
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthManifest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EntryIndexes == nil {
				m.EntryIndexes = make(map[string]uint32)
			}
			var mapkey string
			var mapvalue uint32
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowManifest
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowManifest
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthManifest
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthManifest
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowManifest
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipManifest(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthManifest
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.EntryIndexes[mapkey] = mapvalue
			iNdEx = postIndex
		case 20:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EntryAddrs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManifest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthManifest
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthManifest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EntryAddrs == nil {
				m.EntryAddrs = make(map[uint32]uint32)
			}
			var mapkey uint32
			var mapvalue uint32
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowManifest
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowManifest
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowManifest
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= uint32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipManifest(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthManifest
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.EntryAddrs[mapkey] = mapvalue
			iNdEx = postIndex
		case 21:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CallSitesSize", wireType)
			}
			m.CallSitesSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManifest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CallSitesSize |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 22:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FuncAddrsSize", wireType)
			}
			m.FuncAddrsSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManifest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FuncAddrsSize |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 23:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Random", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManifest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Random = bool(v != 0)
		case 24:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Snapshot", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManifest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthManifest
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthManifest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Snapshot.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipManifest(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthManifest
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthManifest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Instance) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowManifest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Instance: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Instance: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TextAddr", wireType)
			}
			m.TextAddr = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManifest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TextAddr |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StackSize", wireType)
			}
			m.StackSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManifest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StackSize |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StackUsage", wireType)
			}
			m.StackUsage = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManifest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StackUsage |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GlobalsSize", wireType)
			}
			m.GlobalsSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManifest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GlobalsSize |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MemorySize", wireType)
			}
			m.MemorySize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManifest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MemorySize |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxMemorySize", wireType)
			}
			m.MaxMemorySize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManifest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxMemorySize |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InitRoutine", wireType)
			}
			m.InitRoutine = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManifest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InitRoutine |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartFunc", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManifest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthManifest
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthManifest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.StartFunc.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EntryFunc", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManifest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthManifest
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthManifest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.EntryFunc.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Snapshot", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManifest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthManifest
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthManifest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Snapshot.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipManifest(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthManifest
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthManifest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Function) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowManifest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Function: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Function: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var v uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManifest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
			m.Index = int64(v)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Addr", wireType)
			}
			m.Addr = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManifest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Addr |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipManifest(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthManifest
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthManifest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Snapshot) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowManifest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Snapshot: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Snapshot: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Flags", wireType)
			}
			m.Flags = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManifest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Flags |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Trap", wireType)
			}
			m.Trap = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManifest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Trap |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			m.Result = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManifest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Result |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MonotonicTime", wireType)
			}
			m.MonotonicTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManifest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MonotonicTime |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Breakpoints", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManifest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthManifest
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthManifest
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Breakpoints.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipManifest(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthManifest
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthManifest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Breakpoints) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowManifest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Breakpoints: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Breakpoints: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowManifest
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Offsets = append(m.Offsets, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowManifest
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthManifest
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthManifest
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Offsets) == 0 {
					m.Offsets = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowManifest
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Offsets = append(m.Offsets, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Offsets", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipManifest(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthManifest
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthManifest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipManifest(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowManifest
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowManifest
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowManifest
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthManifest
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupManifest
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthManifest
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthManifest        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowManifest          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupManifest = fmt.Errorf("proto: unexpected end of group")
)
