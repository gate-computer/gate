// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: internal/manifest/manifest.proto

package manifest

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type ByteRange struct {
	Offset               int64    `protobuf:"varint,1,opt,name=offset,proto3" json:"offset,omitempty"`
	Length               int64    `protobuf:"varint,2,opt,name=length,proto3" json:"length,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ByteRange) Reset()         { *m = ByteRange{} }
func (m *ByteRange) String() string { return proto.CompactTextString(m) }
func (*ByteRange) ProtoMessage()    {}
func (*ByteRange) Descriptor() ([]byte, []int) {
	return fileDescriptor_manifest_66647cb774220f35, []int{0}
}
func (m *ByteRange) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ByteRange) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ByteRange.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *ByteRange) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ByteRange.Merge(dst, src)
}
func (m *ByteRange) XXX_Size() int {
	return m.Size()
}
func (m *ByteRange) XXX_DiscardUnknown() {
	xxx_messageInfo_ByteRange.DiscardUnknown(m)
}

var xxx_messageInfo_ByteRange proto.InternalMessageInfo

type Program struct {
	TextAddr                  uint64            `protobuf:"varint,1,opt,name=text_addr,json=textAddr,proto3" json:"text_addr,omitempty"`
	TextSize                  uint32            `protobuf:"varint,2,opt,name=text_size,json=textSize,proto3" json:"text_size,omitempty"`
	StackUsage                uint32            `protobuf:"varint,3,opt,name=stack_usage,json=stackUsage,proto3" json:"stack_usage,omitempty"`
	GlobalsSize               uint32            `protobuf:"varint,4,opt,name=globals_size,json=globalsSize,proto3" json:"globals_size,omitempty"`
	MemoryDataSize            uint32            `protobuf:"varint,5,opt,name=memory_data_size,json=memoryDataSize,proto3" json:"memory_data_size,omitempty"`
	MemorySize                uint32            `protobuf:"varint,6,opt,name=memory_size,json=memorySize,proto3" json:"memory_size,omitempty"`
	MemorySizeLimit           uint32            `protobuf:"varint,7,opt,name=memory_size_limit,json=memorySizeLimit,proto3" json:"memory_size_limit,omitempty"`
	InitRoutine               uint32            `protobuf:"varint,8,opt,name=init_routine,json=initRoutine,proto3" json:"init_routine,omitempty"`
	ModuleSize                int64             `protobuf:"varint,9,opt,name=module_size,json=moduleSize,proto3" json:"module_size,omitempty"`
	Sections                  []ByteRange       `protobuf:"bytes,10,rep,name=sections" json:"sections"`
	BufferSection             ByteRange         `protobuf:"bytes,11,opt,name=buffer_section,json=bufferSection" json:"buffer_section"`
	BufferSectionHeaderLength int64             `protobuf:"varint,12,opt,name=buffer_section_header_length,json=bufferSectionHeaderLength,proto3" json:"buffer_section_header_length,omitempty"`
	StackSection              ByteRange         `protobuf:"bytes,13,opt,name=stack_section,json=stackSection" json:"stack_section"`
	GlobalTypes               []byte            `protobuf:"bytes,14,opt,name=global_types,json=globalTypes,proto3" json:"global_types,omitempty"`
	EntryIndexes              map[string]uint32 `protobuf:"bytes,15,rep,name=entry_indexes,json=entryIndexes" json:"entry_indexes" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	EntryAddrs                map[uint32]uint32 `protobuf:"bytes,16,rep,name=entry_addrs,json=entryAddrs" json:"entry_addrs" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	CallSitesSize             uint32            `protobuf:"varint,17,opt,name=call_sites_size,json=callSitesSize,proto3" json:"call_sites_size,omitempty"`
	FuncAddrsSize             uint32            `protobuf:"varint,18,opt,name=func_addrs_size,json=funcAddrsSize,proto3" json:"func_addrs_size,omitempty"`
	RandomSeed                bool              `protobuf:"varint,19,opt,name=random_seed,json=randomSeed,proto3" json:"random_seed,omitempty"`
	XXX_NoUnkeyedLiteral      struct{}          `json:"-"`
	XXX_sizecache             int32             `json:"-"`
}

func (m *Program) Reset()         { *m = Program{} }
func (m *Program) String() string { return proto.CompactTextString(m) }
func (*Program) ProtoMessage()    {}
func (*Program) Descriptor() ([]byte, []int) {
	return fileDescriptor_manifest_66647cb774220f35, []int{1}
}
func (m *Program) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Program) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Program.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Program) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Program.Merge(dst, src)
}
func (m *Program) XXX_Size() int {
	return m.Size()
}
func (m *Program) XXX_DiscardUnknown() {
	xxx_messageInfo_Program.DiscardUnknown(m)
}

var xxx_messageInfo_Program proto.InternalMessageInfo

type Instance struct {
	TextAddr             uint64   `protobuf:"varint,1,opt,name=text_addr,json=textAddr,proto3" json:"text_addr,omitempty"`
	StackSize            uint32   `protobuf:"varint,2,opt,name=stack_size,json=stackSize,proto3" json:"stack_size,omitempty"`
	StackUsage           uint32   `protobuf:"varint,3,opt,name=stack_usage,json=stackUsage,proto3" json:"stack_usage,omitempty"`
	GlobalsSize          uint32   `protobuf:"varint,4,opt,name=globals_size,json=globalsSize,proto3" json:"globals_size,omitempty"`
	MemorySize           uint32   `protobuf:"varint,5,opt,name=memory_size,json=memorySize,proto3" json:"memory_size,omitempty"`
	MaxMemorySize        uint32   `protobuf:"varint,6,opt,name=max_memory_size,json=maxMemorySize,proto3" json:"max_memory_size,omitempty"`
	InitRoutine          uint32   `protobuf:"varint,7,opt,name=init_routine,json=initRoutine,proto3" json:"init_routine,omitempty"`
	EntryIndex           uint32   `protobuf:"varint,8,opt,name=entry_index,json=entryIndex,proto3" json:"entry_index,omitempty"`
	EntryAddr            uint32   `protobuf:"varint,9,opt,name=entry_addr,json=entryAddr,proto3" json:"entry_addr,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Instance) Reset()         { *m = Instance{} }
func (m *Instance) String() string { return proto.CompactTextString(m) }
func (*Instance) ProtoMessage()    {}
func (*Instance) Descriptor() ([]byte, []int) {
	return fileDescriptor_manifest_66647cb774220f35, []int{2}
}
func (m *Instance) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Instance) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Instance.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *Instance) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Instance.Merge(dst, src)
}
func (m *Instance) XXX_Size() int {
	return m.Size()
}
func (m *Instance) XXX_DiscardUnknown() {
	xxx_messageInfo_Instance.DiscardUnknown(m)
}

var xxx_messageInfo_Instance proto.InternalMessageInfo

func init() {
	proto.RegisterType((*ByteRange)(nil), "manifest.ByteRange")
	proto.RegisterType((*Program)(nil), "manifest.Program")
	proto.RegisterMapType((map[uint32]uint32)(nil), "manifest.Program.EntryAddrsEntry")
	proto.RegisterMapType((map[string]uint32)(nil), "manifest.Program.EntryIndexesEntry")
	proto.RegisterType((*Instance)(nil), "manifest.Instance")
}
func (m *ByteRange) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ByteRange) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Offset != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintManifest(dAtA, i, uint64(m.Offset))
	}
	if m.Length != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintManifest(dAtA, i, uint64(m.Length))
	}
	return i, nil
}

func (m *Program) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Program) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.TextAddr != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintManifest(dAtA, i, uint64(m.TextAddr))
	}
	if m.TextSize != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintManifest(dAtA, i, uint64(m.TextSize))
	}
	if m.StackUsage != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintManifest(dAtA, i, uint64(m.StackUsage))
	}
	if m.GlobalsSize != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintManifest(dAtA, i, uint64(m.GlobalsSize))
	}
	if m.MemoryDataSize != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintManifest(dAtA, i, uint64(m.MemoryDataSize))
	}
	if m.MemorySize != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintManifest(dAtA, i, uint64(m.MemorySize))
	}
	if m.MemorySizeLimit != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintManifest(dAtA, i, uint64(m.MemorySizeLimit))
	}
	if m.InitRoutine != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintManifest(dAtA, i, uint64(m.InitRoutine))
	}
	if m.ModuleSize != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintManifest(dAtA, i, uint64(m.ModuleSize))
	}
	if len(m.Sections) > 0 {
		for _, msg := range m.Sections {
			dAtA[i] = 0x52
			i++
			i = encodeVarintManifest(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	dAtA[i] = 0x5a
	i++
	i = encodeVarintManifest(dAtA, i, uint64(m.BufferSection.Size()))
	n1, err := m.BufferSection.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n1
	if m.BufferSectionHeaderLength != 0 {
		dAtA[i] = 0x60
		i++
		i = encodeVarintManifest(dAtA, i, uint64(m.BufferSectionHeaderLength))
	}
	dAtA[i] = 0x6a
	i++
	i = encodeVarintManifest(dAtA, i, uint64(m.StackSection.Size()))
	n2, err := m.StackSection.MarshalTo(dAtA[i:])
	if err != nil {
		return 0, err
	}
	i += n2
	if len(m.GlobalTypes) > 0 {
		dAtA[i] = 0x72
		i++
		i = encodeVarintManifest(dAtA, i, uint64(len(m.GlobalTypes)))
		i += copy(dAtA[i:], m.GlobalTypes)
	}
	if len(m.EntryIndexes) > 0 {
		for k, _ := range m.EntryIndexes {
			dAtA[i] = 0x7a
			i++
			v := m.EntryIndexes[k]
			mapSize := 1 + len(k) + sovManifest(uint64(len(k))) + 1 + sovManifest(uint64(v))
			i = encodeVarintManifest(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintManifest(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			dAtA[i] = 0x10
			i++
			i = encodeVarintManifest(dAtA, i, uint64(v))
		}
	}
	if len(m.EntryAddrs) > 0 {
		for k, _ := range m.EntryAddrs {
			dAtA[i] = 0x82
			i++
			dAtA[i] = 0x1
			i++
			v := m.EntryAddrs[k]
			mapSize := 1 + sovManifest(uint64(k)) + 1 + sovManifest(uint64(v))
			i = encodeVarintManifest(dAtA, i, uint64(mapSize))
			dAtA[i] = 0x8
			i++
			i = encodeVarintManifest(dAtA, i, uint64(k))
			dAtA[i] = 0x10
			i++
			i = encodeVarintManifest(dAtA, i, uint64(v))
		}
	}
	if m.CallSitesSize != 0 {
		dAtA[i] = 0x88
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintManifest(dAtA, i, uint64(m.CallSitesSize))
	}
	if m.FuncAddrsSize != 0 {
		dAtA[i] = 0x90
		i++
		dAtA[i] = 0x1
		i++
		i = encodeVarintManifest(dAtA, i, uint64(m.FuncAddrsSize))
	}
	if m.RandomSeed {
		dAtA[i] = 0x98
		i++
		dAtA[i] = 0x1
		i++
		if m.RandomSeed {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *Instance) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Instance) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.TextAddr != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintManifest(dAtA, i, uint64(m.TextAddr))
	}
	if m.StackSize != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintManifest(dAtA, i, uint64(m.StackSize))
	}
	if m.StackUsage != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintManifest(dAtA, i, uint64(m.StackUsage))
	}
	if m.GlobalsSize != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintManifest(dAtA, i, uint64(m.GlobalsSize))
	}
	if m.MemorySize != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintManifest(dAtA, i, uint64(m.MemorySize))
	}
	if m.MaxMemorySize != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintManifest(dAtA, i, uint64(m.MaxMemorySize))
	}
	if m.InitRoutine != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintManifest(dAtA, i, uint64(m.InitRoutine))
	}
	if m.EntryIndex != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintManifest(dAtA, i, uint64(m.EntryIndex))
	}
	if m.EntryAddr != 0 {
		dAtA[i] = 0x48
		i++
		i = encodeVarintManifest(dAtA, i, uint64(m.EntryAddr))
	}
	return i, nil
}

func encodeVarintManifest(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *ByteRange) Size() (n int) {
	var l int
	_ = l
	if m.Offset != 0 {
		n += 1 + sovManifest(uint64(m.Offset))
	}
	if m.Length != 0 {
		n += 1 + sovManifest(uint64(m.Length))
	}
	return n
}

func (m *Program) Size() (n int) {
	var l int
	_ = l
	if m.TextAddr != 0 {
		n += 1 + sovManifest(uint64(m.TextAddr))
	}
	if m.TextSize != 0 {
		n += 1 + sovManifest(uint64(m.TextSize))
	}
	if m.StackUsage != 0 {
		n += 1 + sovManifest(uint64(m.StackUsage))
	}
	if m.GlobalsSize != 0 {
		n += 1 + sovManifest(uint64(m.GlobalsSize))
	}
	if m.MemoryDataSize != 0 {
		n += 1 + sovManifest(uint64(m.MemoryDataSize))
	}
	if m.MemorySize != 0 {
		n += 1 + sovManifest(uint64(m.MemorySize))
	}
	if m.MemorySizeLimit != 0 {
		n += 1 + sovManifest(uint64(m.MemorySizeLimit))
	}
	if m.InitRoutine != 0 {
		n += 1 + sovManifest(uint64(m.InitRoutine))
	}
	if m.ModuleSize != 0 {
		n += 1 + sovManifest(uint64(m.ModuleSize))
	}
	if len(m.Sections) > 0 {
		for _, e := range m.Sections {
			l = e.Size()
			n += 1 + l + sovManifest(uint64(l))
		}
	}
	l = m.BufferSection.Size()
	n += 1 + l + sovManifest(uint64(l))
	if m.BufferSectionHeaderLength != 0 {
		n += 1 + sovManifest(uint64(m.BufferSectionHeaderLength))
	}
	l = m.StackSection.Size()
	n += 1 + l + sovManifest(uint64(l))
	l = len(m.GlobalTypes)
	if l > 0 {
		n += 1 + l + sovManifest(uint64(l))
	}
	if len(m.EntryIndexes) > 0 {
		for k, v := range m.EntryIndexes {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovManifest(uint64(len(k))) + 1 + sovManifest(uint64(v))
			n += mapEntrySize + 1 + sovManifest(uint64(mapEntrySize))
		}
	}
	if len(m.EntryAddrs) > 0 {
		for k, v := range m.EntryAddrs {
			_ = k
			_ = v
			mapEntrySize := 1 + sovManifest(uint64(k)) + 1 + sovManifest(uint64(v))
			n += mapEntrySize + 2 + sovManifest(uint64(mapEntrySize))
		}
	}
	if m.CallSitesSize != 0 {
		n += 2 + sovManifest(uint64(m.CallSitesSize))
	}
	if m.FuncAddrsSize != 0 {
		n += 2 + sovManifest(uint64(m.FuncAddrsSize))
	}
	if m.RandomSeed {
		n += 3
	}
	return n
}

func (m *Instance) Size() (n int) {
	var l int
	_ = l
	if m.TextAddr != 0 {
		n += 1 + sovManifest(uint64(m.TextAddr))
	}
	if m.StackSize != 0 {
		n += 1 + sovManifest(uint64(m.StackSize))
	}
	if m.StackUsage != 0 {
		n += 1 + sovManifest(uint64(m.StackUsage))
	}
	if m.GlobalsSize != 0 {
		n += 1 + sovManifest(uint64(m.GlobalsSize))
	}
	if m.MemorySize != 0 {
		n += 1 + sovManifest(uint64(m.MemorySize))
	}
	if m.MaxMemorySize != 0 {
		n += 1 + sovManifest(uint64(m.MaxMemorySize))
	}
	if m.InitRoutine != 0 {
		n += 1 + sovManifest(uint64(m.InitRoutine))
	}
	if m.EntryIndex != 0 {
		n += 1 + sovManifest(uint64(m.EntryIndex))
	}
	if m.EntryAddr != 0 {
		n += 1 + sovManifest(uint64(m.EntryAddr))
	}
	return n
}

func sovManifest(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozManifest(x uint64) (n int) {
	return sovManifest(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ByteRange) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowManifest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ByteRange: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ByteRange: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			m.Offset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManifest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Offset |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Length", wireType)
			}
			m.Length = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManifest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Length |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipManifest(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthManifest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Program) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowManifest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Program: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Program: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TextAddr", wireType)
			}
			m.TextAddr = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManifest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TextAddr |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TextSize", wireType)
			}
			m.TextSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManifest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TextSize |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StackUsage", wireType)
			}
			m.StackUsage = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManifest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StackUsage |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GlobalsSize", wireType)
			}
			m.GlobalsSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManifest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GlobalsSize |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MemoryDataSize", wireType)
			}
			m.MemoryDataSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManifest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MemoryDataSize |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MemorySize", wireType)
			}
			m.MemorySize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManifest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MemorySize |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MemorySizeLimit", wireType)
			}
			m.MemorySizeLimit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManifest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MemorySizeLimit |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InitRoutine", wireType)
			}
			m.InitRoutine = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManifest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InitRoutine |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ModuleSize", wireType)
			}
			m.ModuleSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManifest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ModuleSize |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sections", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManifest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthManifest
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sections = append(m.Sections, ByteRange{})
			if err := m.Sections[len(m.Sections)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BufferSection", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManifest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthManifest
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BufferSection.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BufferSectionHeaderLength", wireType)
			}
			m.BufferSectionHeaderLength = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManifest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BufferSectionHeaderLength |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StackSection", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManifest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthManifest
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.StackSection.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GlobalTypes", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManifest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthManifest
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GlobalTypes = append(m.GlobalTypes[:0], dAtA[iNdEx:postIndex]...)
			if m.GlobalTypes == nil {
				m.GlobalTypes = []byte{}
			}
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EntryIndexes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManifest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthManifest
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EntryIndexes == nil {
				m.EntryIndexes = make(map[string]uint32)
			}
			var mapkey string
			var mapvalue uint32
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowManifest
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowManifest
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthManifest
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowManifest
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= (uint32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipManifest(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthManifest
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.EntryIndexes[mapkey] = mapvalue
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EntryAddrs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManifest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthManifest
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EntryAddrs == nil {
				m.EntryAddrs = make(map[uint32]uint32)
			}
			var mapkey uint32
			var mapvalue uint32
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowManifest
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowManifest
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= (uint32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowManifest
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= (uint32(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipManifest(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthManifest
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.EntryAddrs[mapkey] = mapvalue
			iNdEx = postIndex
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CallSitesSize", wireType)
			}
			m.CallSitesSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManifest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CallSitesSize |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FuncAddrsSize", wireType)
			}
			m.FuncAddrsSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManifest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FuncAddrsSize |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RandomSeed", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManifest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.RandomSeed = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipManifest(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthManifest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Instance) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowManifest
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Instance: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Instance: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TextAddr", wireType)
			}
			m.TextAddr = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManifest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TextAddr |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StackSize", wireType)
			}
			m.StackSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManifest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StackSize |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StackUsage", wireType)
			}
			m.StackUsage = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManifest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StackUsage |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field GlobalsSize", wireType)
			}
			m.GlobalsSize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManifest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.GlobalsSize |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MemorySize", wireType)
			}
			m.MemorySize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManifest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MemorySize |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxMemorySize", wireType)
			}
			m.MaxMemorySize = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManifest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxMemorySize |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InitRoutine", wireType)
			}
			m.InitRoutine = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManifest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InitRoutine |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EntryIndex", wireType)
			}
			m.EntryIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManifest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EntryIndex |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EntryAddr", wireType)
			}
			m.EntryAddr = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowManifest
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EntryAddr |= (uint32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipManifest(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthManifest
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipManifest(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowManifest
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowManifest
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowManifest
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthManifest
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowManifest
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipManifest(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthManifest = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowManifest   = fmt.Errorf("proto: integer overflow")
)

func init() {
	proto.RegisterFile("internal/manifest/manifest.proto", fileDescriptor_manifest_66647cb774220f35)
}

var fileDescriptor_manifest_66647cb774220f35 = []byte{
	// 656 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x54, 0xdd, 0x4e, 0x13, 0x41,
	0x14, 0x66, 0x29, 0xd0, 0xf6, 0xb4, 0x4b, 0x61, 0x20, 0x66, 0x45, 0x2d, 0x05, 0x13, 0xd2, 0x78,
	0x81, 0x89, 0xc6, 0xc4, 0x68, 0x14, 0x25, 0x9a, 0x40, 0x82, 0xc6, 0x6c, 0xf5, 0x7a, 0x32, 0x74,
	0x4f, 0xcb, 0x86, 0xdd, 0x59, 0xb2, 0x33, 0x35, 0x2d, 0x4f, 0xe1, 0xd3, 0xf8, 0x0c, 0x5c, 0xfa,
	0x04, 0x46, 0xf1, 0xce, 0xa7, 0x30, 0x73, 0x66, 0x7f, 0x0a, 0x28, 0xdc, 0x78, 0x37, 0xf3, 0x9d,
	0xef, 0xfc, 0xcc, 0x9e, 0xef, 0x5b, 0xe8, 0x84, 0x52, 0x63, 0x2a, 0x45, 0xf4, 0x30, 0x16, 0x32,
	0x1c, 0xa0, 0xd2, 0xc5, 0x61, 0xfb, 0x24, 0x4d, 0x74, 0xc2, 0x6a, 0xf9, 0x7d, 0xf3, 0x39, 0xd4,
	0x77, 0x27, 0x1a, 0x7d, 0x21, 0x87, 0xc8, 0x6e, 0xc1, 0x42, 0x32, 0x18, 0x28, 0xd4, 0x9e, 0xd3,
	0x71, 0xba, 0x15, 0x3f, 0xbb, 0x19, 0x3c, 0x42, 0x39, 0xd4, 0x47, 0xde, 0xac, 0xc5, 0xed, 0x6d,
	0xf3, 0x77, 0x15, 0xaa, 0x1f, 0xd2, 0x64, 0x98, 0x8a, 0x98, 0xdd, 0x81, 0xba, 0xc6, 0xb1, 0xe6,
	0x22, 0x08, 0x52, 0x4a, 0x9f, 0xf3, 0x6b, 0x06, 0x78, 0x1d, 0x04, 0x69, 0x11, 0x54, 0xe1, 0x29,
	0x52, 0x0d, 0xd7, 0x06, 0x7b, 0xe1, 0x29, 0xb2, 0x75, 0x68, 0x28, 0x2d, 0xfa, 0xc7, 0x7c, 0xa4,
	0xc4, 0x10, 0xbd, 0x0a, 0x85, 0x81, 0xa0, 0x4f, 0x06, 0x61, 0x1b, 0xd0, 0x1c, 0x46, 0xc9, 0xa1,
	0x88, 0x94, 0x2d, 0x30, 0x47, 0x8c, 0x46, 0x86, 0x51, 0x8d, 0x2e, 0x2c, 0xc5, 0x18, 0x27, 0xe9,
	0x84, 0x07, 0x42, 0x0b, 0x4b, 0x9b, 0x27, 0xda, 0xa2, 0xc5, 0xdf, 0x08, 0x2d, 0xf2, 0x6e, 0x19,
	0x93, 0x48, 0x0b, 0xb6, 0x9b, 0x85, 0x88, 0xf0, 0x00, 0x96, 0xa7, 0x08, 0x3c, 0x0a, 0xe3, 0x50,
	0x7b, 0x55, 0xa2, 0xb5, 0x4a, 0xda, 0x81, 0x81, 0xcd, 0x64, 0xa1, 0x0c, 0x35, 0x4f, 0x93, 0x91,
	0x0e, 0x25, 0x7a, 0x35, 0x3b, 0x99, 0xc1, 0x7c, 0x0b, 0x51, 0xbf, 0x24, 0x18, 0x45, 0x68, 0xfb,
	0xd5, 0xe9, 0x03, 0x82, 0x85, 0xa8, 0xdf, 0x13, 0xa8, 0x29, 0xec, 0xeb, 0x30, 0x91, 0xca, 0x83,
	0x4e, 0xa5, 0xdb, 0x78, 0xb4, 0xb2, 0x5d, 0xac, 0xab, 0xd8, 0xcd, 0xee, 0xdc, 0xd9, 0xf7, 0xf5,
	0x19, 0xbf, 0xa0, 0xb2, 0x57, 0xb0, 0x78, 0x38, 0x1a, 0x0c, 0x30, 0xe5, 0x19, 0xe4, 0x35, 0x3a,
	0xce, 0xf5, 0xc9, 0xae, 0x4d, 0xe8, 0x59, 0x3e, 0xdb, 0x81, 0xbb, 0x17, 0x2b, 0xf0, 0x23, 0x14,
	0x01, 0xa6, 0x3c, 0xdb, 0x75, 0x93, 0x46, 0xbd, 0x7d, 0x21, 0x69, 0x8f, 0x18, 0x07, 0x44, 0x60,
	0x2f, 0xc1, 0xb5, 0x8b, 0xcb, 0x27, 0x70, 0x6f, 0x9a, 0xa0, 0x49, 0xfc, 0x7c, 0x80, 0x62, 0xaf,
	0x5c, 0x4f, 0x4e, 0x50, 0x79, 0x8b, 0x1d, 0xa7, 0xdb, 0xcc, 0xf7, 0xfa, 0xd1, 0x40, 0xec, 0x3d,
	0xb8, 0x28, 0x75, 0x3a, 0xe1, 0xa1, 0x0c, 0x70, 0x8c, 0xca, 0x6b, 0xd1, 0x17, 0xba, 0x5f, 0xb6,
	0xc8, 0xf4, 0xb7, 0xfd, 0xd6, 0xd0, 0xf6, 0x2d, 0x8b, 0xce, 0x79, 0x4b, 0x9c, 0x0a, 0xb0, 0x3d,
	0x68, 0xd8, 0x7a, 0x46, 0xa6, 0xca, 0x5b, 0xa2, 0x6a, 0x1b, 0xff, 0xa8, 0x66, 0xa4, 0x7b, 0xa1,
	0x16, 0x60, 0x01, 0xb3, 0x2d, 0x68, 0xf5, 0x45, 0x14, 0x71, 0x15, 0x6a, 0xcc, 0x74, 0xb9, 0x4c,
	0xdb, 0x77, 0x0d, 0xdc, 0x33, 0x28, 0xad, 0x77, 0x0b, 0x5a, 0x83, 0x91, 0xec, 0xdb, 0x86, 0x96,
	0xc7, 0x2c, 0xcf, 0xc0, 0x54, 0x2b, 0xd7, 0x65, 0x2a, 0x64, 0x90, 0xc4, 0x5c, 0x21, 0x06, 0xde,
	0x4a, 0xc7, 0xe9, 0xd6, 0x7c, 0xb0, 0x50, 0x0f, 0x31, 0x58, 0xdb, 0x81, 0xe5, 0x2b, 0x6f, 0x64,
	0x4b, 0x50, 0x39, 0xc6, 0x09, 0xf9, 0xad, 0xee, 0x9b, 0x23, 0x5b, 0x85, 0xf9, 0xcf, 0x22, 0x1a,
	0xe5, 0x36, 0xb3, 0x97, 0x67, 0xb3, 0x4f, 0x9d, 0xb5, 0x17, 0xd0, 0xba, 0xf4, 0xac, 0xe9, 0x74,
	0xf7, 0x86, 0xf4, 0xcd, 0xaf, 0xb3, 0x50, 0xdb, 0x97, 0x4a, 0x0b, 0xd9, 0xc7, 0xeb, 0xdd, 0x7e,
	0x0f, 0x20, 0xd3, 0x45, 0x69, 0xf7, 0xba, 0xdd, 0xfc, 0xff, 0xf2, 0xfb, 0x25, 0x17, 0xcf, 0x5f,
	0x71, 0xf1, 0x16, 0xb4, 0x62, 0x31, 0xe6, 0x57, 0xad, 0xee, 0xc6, 0x62, 0xfc, 0xae, 0xe4, 0x5d,
	0x76, 0x70, 0xf5, 0xaf, 0x0e, 0x9e, 0xd2, 0x60, 0xe6, 0x71, 0x28, 0x65, 0x65, 0xde, 0x5b, 0x8a,
	0x8a, 0x1c, 0xee, 0xfa, 0xf5, 0x42, 0x2a, 0xbb, 0xab, 0x67, 0x3f, 0xdb, 0x33, 0x67, 0xe7, 0x6d,
	0xe7, 0xdb, 0x79, 0xdb, 0xf9, 0x71, 0xde, 0x76, 0xbe, 0xfc, 0x6a, 0xcf, 0x1c, 0x2e, 0xd0, 0x9f,
	0xf8, 0xf1, 0x9f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xed, 0xd4, 0xb3, 0x51, 0xad, 0x05, 0x00, 0x00,
}
