// Copyright (c) 2018 Timo Savola. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package eventtypes

import (
	"bytes"
	"fmt"
	"io/ioutil"
	"sort"
	"unicode"

	"gate.computer/gate/server/event"
	m "import.name/make"
)

const source = "internal/make/eventtypes/task.go"

func Task(GOFMT string) m.Task {
	target := "server/event/type.gen.go"
	deps := m.Globber("server/event/*.go", source)

	return m.If(
		m.Outdated(target, deps),
		m.Func(func() error {
			m.Println("Making", target)

			b := bytes.NewBuffer(nil)

			fmt.Fprintf(b, "// Code generated by %s, DO NOT EDIT!\n", source)
			fmt.Fprintln(b)
			fmt.Fprintln(b, "package event")
			fmt.Fprintln(b)

			var names []string
			for _, name := range event.Type_name {
				names = append(names, name)
			}
			sort.Strings(names)

			for _, name := range names {
				fmt.Fprintf(b, "func (x *%s) EventName() string {", snake2title(name))
				fmt.Fprintf(b, " return \"%s\" }\n", name)
			}

			fmt.Fprintln(b)

			for _, name := range names {
				fmt.Fprintf(b, "func (*%s) EventType() int32 {", snake2title(name))
				fmt.Fprintf(b, " return int32(Type_%s) }\n", name)
			}

			data, err := m.RunIO(b, GOFMT)
			if err != nil {
				return err
			}

			return ioutil.WriteFile(target, data, 0666)
		}),
	)
}

func snake2title(snake string) string {
	var (
		title string
		up    = true
	)

	for _, code := range snake {
		if code == '_' {
			up = true
		} else {
			r := rune(code)
			if up {
				r = unicode.ToUpper(r)
				up = false
			} else {
				r = unicode.ToLower(r)
			}
			title += string(r)
		}
	}

	return title
}
