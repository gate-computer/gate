// Copyright (c) 2020 Timo Savola. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package main

import (
	"fmt"
	"hash/crc64"
	"log"
	"os"
	"os/exec"
)

func main() {
	wat2wasm := os.Getenv("WAT2WASM")
	if wat2wasm == "" {
		wat2wasm = "wat2wasm"
	}

	cmd := exec.Command(wat2wasm, "-o", "/dev/stdout", "library.wat")
	cmd.Stderr = os.Stderr
	wasm, err := cmd.Output()
	if err != nil {
		log.Fatal(err)
	}

	checksum := crc64.Checksum(wasm, crc64.MakeTable(crc64.ECMA))

	f, err := os.Create("library.go")
	if err != nil {
		log.Fatal(err)
	}
	defer f.Close()

	fmt.Fprintln(f, "// Code generated by internal/cmd/abi-library.  DO NOT EDIT.")
	fmt.Fprintln(f)
	fmt.Fprintln(f, "package abi")
	fmt.Fprintln(f)
	fmt.Fprintf(f, "const LibraryChecksum uint64 = 0x%016x\n", checksum)
	fmt.Fprintln(f)
	fmt.Fprint(f, "var libraryWASM = [...]byte{")
	for i, b := range wasm {
		if i%12 == 0 {
			fmt.Fprintf(f, "\n\t")
		} else {
			fmt.Fprintf(f, " ")
		}
		fmt.Fprintf(f, "0x%02x,", b)
	}
	fmt.Fprintln(f, "\n}")
}
