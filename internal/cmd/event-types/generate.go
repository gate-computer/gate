// Copyright (c) 2018 Timo Savola. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package main

import (
	"bytes"
	"flag"
	"fmt"
	"io/ioutil"
	"os"
	"sort"
	"strings"

	"gate.computer/gate/server/event"
)

func main() {
	flag.Usage = func() {
		fmt.Fprintf(flag.CommandLine.Output(), "Usage: %s target-filename\n", flag.CommandLine.Name())
		flag.PrintDefaults()
	}
	flag.Parse()
	if flag.NArg() != 1 {
		flag.Usage()
		os.Exit(2)
	}
	filename := flag.Arg(0)

	b := bytes.NewBuffer(nil)

	fmt.Fprintln(b, "// Code generated by internal/cmd/event-types.  DO NOT EDIT.")
	fmt.Fprintln(b)
	fmt.Fprintln(b, "package event")
	fmt.Fprintln(b)

	var names []string

	for _, name := range event.Type_name {
		names = append(names, name)
	}

	sort.Strings(names)

	for _, name := range names {
		fmt.Fprintf(b, "func (x *%s) EventName() string {", strings.Replace(strings.Title(strings.Replace(strings.ToLower(name), "_", " ", -1)), " ", "", -1))
		fmt.Fprintf(b, " return \"%s\" }\n", name)
	}

	fmt.Fprintln(b)

	for _, name := range names {
		fmt.Fprintf(b, "func (*%s) EventType() int32 {", strings.Replace(strings.Title(strings.Replace(strings.ToLower(name), "_", " ", -1)), " ", "", -1))
		fmt.Fprintf(b, " return int32(Type_%s) }\n", name)
	}

	if err := ioutil.WriteFile(filename, b.Bytes(), 0644); err != nil {
		fmt.Fprintln(os.Stderr, err)
		os.Exit(1)
	}
}
